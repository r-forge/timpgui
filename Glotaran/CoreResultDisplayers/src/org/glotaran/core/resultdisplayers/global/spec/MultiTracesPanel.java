/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MultiTracesPanel.java
 *
 * Created on Mar 18, 2010, 9:40:41 AM
 */
package org.glotaran.core.resultdisplayers.global.spec;

import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import org.glotaran.core.messages.CoreErrorMessages;
import org.glotaran.core.models.structures.TimpResultDataset;
import org.glotaran.core.resultdisplayers.common.panels.CommonTools;
import org.glotaran.core.resultdisplayers.common.panels.RelationFrom;
import org.glotaran.jfreechartcustom.GraphPanel;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.panel.CrosshairOverlay;
import org.jfree.chart.plot.Crosshair;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeries;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.jfree.ui.RectangleAnchor;

/**
 *
 * @author slapten
 */
public class MultiTracesPanel extends javax.swing.JPanel {

    private final static long serialVersionUID = 1L;
    private RelationFrom relation = null;
    private List<TimpResultDataset> resultDatasets = null;
    private GraphPanel spectraImage;
    private Crosshair crosshair;    
    private TimpResultDataset fromDataset;
    private double[] t0curveFrom = null;
    private double threshhold = 0;
    private ArrayList<double[]> t0curvesTo = new ArrayList<double[]>();

    int numberOfComponents;

    /** Creates new form MultiTracesPanel */
    public MultiTracesPanel() {
        initComponents();
    }

    public MultiTracesPanel(RelationFrom relations, List<TimpResultDataset> results, Double thresh) {
        initComponents();
        relation = relations;
        resultDatasets = results;
        fromDataset = results.get(relations.indexFrom);
        t0curveFrom = CommonTools.calculateDispersionTrace(fromDataset);
        if (thresh != null){
           threshhold =  thresh;
        }
        for (int i = 0; i < relation.scaledDatasets.size(); i++){
            t0curvesTo.add(CommonTools.calculateDispersionTrace(results.get(relation.scaledDatasets.get(i).indexTo)));
        }

        numberOfComponents = fromDataset.getJvec() != null ? fromDataset.getJvec().length / 2 : fromDataset.getKineticParameters().length / 2;
        if (fromDataset.getSpectra().getRowDimension() > numberOfComponents * 2) {
            jTBShowChohSpec.setEnabled(true);
        }
        createCroshair();
//create spectra plot form "from dataset"
        jPSpectra.removeAll();
        spectraImage = createSpectraPlot(fromDataset);

        spectraImage.getChart().getXYPlot().getDomainAxis().setLowerMargin(0.0);
        spectraImage.getChart().getXYPlot().getDomainAxis().setUpperMargin(0.0);

        jPSpectra.add(spectraImage);
//create plot with curves from "from dataset";
        updateTrace(0);
        
//initialise slider from "from dataset"
        jSWavelengths.getModel().setRangeProperties(0, 1, 0, fromDataset.getX2().length - 1, true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPSpectra = new javax.swing.JPanel();
        jPTraces = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jSWavelengths = new javax.swing.JSlider();
        jToolBar1 = new javax.swing.JToolBar();
        jTBLinLog = new javax.swing.JToggleButton();
        jTFLinPart = new javax.swing.JTextField();
        jBUpdLinLog = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jTBShowChohSpec = new javax.swing.JToggleButton();

        setLayout(new java.awt.GridBagLayout());

        jPSpectra.setBackground(new java.awt.Color(255, 255, 255));
        jPSpectra.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.6;
        add(jPSpectra, gridBagConstraints);

        jPTraces.setBackground(new java.awt.Color(255, 255, 255));
        jPTraces.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        add(jPTraces, gridBagConstraints);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jSWavelengths.setValue(0);
        jSWavelengths.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSWavelengthsStateChanged(evt);
            }
        });
        jPanel10.add(jSWavelengths, java.awt.BorderLayout.PAGE_START);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel10, gridBagConstraints);

        jToolBar1.setRollover(true);

        jTBLinLog.setText(org.openide.util.NbBundle.getMessage(MultiTracesPanel.class, "MultiTracesPanel.jTBLinLog.text")); // NOI18N
        jTBLinLog.setFocusable(false);
        jTBLinLog.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTBLinLog.setMaximumSize(new java.awt.Dimension(59, 21));
        jTBLinLog.setMinimumSize(new java.awt.Dimension(59, 21));
        jTBLinLog.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTBLinLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBLinLogActionPerformed(evt);
            }
        });
        jToolBar1.add(jTBLinLog);

        jTFLinPart.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTFLinPart.setText(org.openide.util.NbBundle.getMessage(MultiTracesPanel.class, "MultiTracesPanel.jTFLinPart.text")); // NOI18N
        jTFLinPart.setMaximumSize(new java.awt.Dimension(70, 21));
        jTFLinPart.setMinimumSize(new java.awt.Dimension(4, 21));
        jToolBar1.add(jTFLinPart);

        jBUpdLinLog.setText(org.openide.util.NbBundle.getMessage(MultiTracesPanel.class, "MultiTracesPanel.jBUpdLinLog.text")); // NOI18N
        jBUpdLinLog.setEnabled(false);
        jBUpdLinLog.setFocusable(false);
        jBUpdLinLog.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBUpdLinLog.setMaximumSize(new java.awt.Dimension(64, 21));
        jBUpdLinLog.setMinimumSize(new java.awt.Dimension(64, 21));
        jBUpdLinLog.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBUpdLinLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBUpdLinLogActionPerformed(evt);
            }
        });
        jToolBar1.add(jBUpdLinLog);
        jToolBar1.add(jSeparator1);

        jTBShowChohSpec.setText(org.openide.util.NbBundle.getMessage(MultiTracesPanel.class, "MultiTracesPanel.jTBShowChohSpec.text")); // NOI18N
        jTBShowChohSpec.setEnabled(false);
        jTBShowChohSpec.setFocusable(false);
        jTBShowChohSpec.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTBShowChohSpec.setMaximumSize(new java.awt.Dimension(112, 21));
        jTBShowChohSpec.setMinimumSize(new java.awt.Dimension(112, 21));
        jTBShowChohSpec.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTBShowChohSpec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBShowChohSpecActionPerformed(evt);
            }
        });
        jToolBar1.add(jTBShowChohSpec);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(jToolBar1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jSWavelengthsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSWavelengthsStateChanged
        crosshair.setValue(fromDataset.getX2()[jSWavelengths.getValue()]);
        updateTrace(jSWavelengths.getValue());
}//GEN-LAST:event_jSWavelengthsStateChanged

    private void jTBLinLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBLinLogActionPerformed
        if (jTBLinLog.isSelected()){
            try {
                updateTrace(jSWavelengths.getValue());
                jBUpdLinLog.setEnabled(true);
            } catch (Exception e) {
                CoreErrorMessages.updLinLogException();
                jTBLinLog.setSelected(false);
            }
        } else {
            updateTrace(jSWavelengths.getValue());
            jBUpdLinLog.setEnabled(false);
        }
}//GEN-LAST:event_jTBLinLogActionPerformed

    private void jBUpdLinLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBUpdLinLogActionPerformed
        try {
            updateTrace(jSWavelengths.getValue());
        } catch (Exception e) {
            CoreErrorMessages.updLinLogException();
        }
}//GEN-LAST:event_jBUpdLinLogActionPerformed

    private void jTBShowChohSpecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBShowChohSpecActionPerformed
        jPSpectra.removeAll();
        spectraImage = createSpectraPlot(fromDataset);
        jPSpectra.add(spectraImage);
        jPSpectra.validate();
}//GEN-LAST:event_jTBShowChohSpecActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBUpdLinLog;
    private javax.swing.JPanel jPSpectra;
    private javax.swing.JPanel jPTraces;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JSlider jSWavelengths;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToggleButton jTBLinLog;
    private javax.swing.JToggleButton jTBShowChohSpec;
    private javax.swing.JTextField jTFLinPart;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private GraphPanel createSpectraPlot(TimpResultDataset dataset) {
        String specName = dataset.getJvec() != null ? "SAS" : "EAS";
        boolean errorBars = dataset.getSpectraErr() != null ? true : false;
        int numComp = jTBShowChohSpec.isSelected() ? numberOfComponents + 1 : numberOfComponents;

        YIntervalSeriesCollection realSasCollection = new YIntervalSeriesCollection();
        YIntervalSeries seria;

//create collection of sas(eas)
        for (int j = 0; j < numComp; j++) {
            seria = new YIntervalSeries(specName + (j + 1));// new XYSeries(specName + (j + 1));
            for (int i = 0; i < dataset.getX2().length; i++) {
                if (errorBars) {
                    seria.add(dataset.getX2()[i], dataset.getSpectra().get(j, i),
                            dataset.getSpectra().get(j, i) - dataset.getSpectraErr().get(j, i),
                            dataset.getSpectra().get(j, i) + dataset.getSpectraErr().get(j, i));
                } else {
                    seria.add(dataset.getX2()[i], dataset.getSpectra().get(j, i),
                            dataset.getSpectra().get(j, i),
                            dataset.getSpectra().get(j, i));
                }
            }
            realSasCollection.addSeries(seria);
        }
        GraphPanel chartPanel = CommonTools.createGraphPanel(realSasCollection, specName, "Wavelength (nm)", errorBars, dataset.getX2()[dataset.getX2().length - 1]);
        CrosshairOverlay overlay = new CrosshairOverlay();
        overlay.addDomainCrosshair(crosshair);
        chartPanel.addOverlay(overlay);
        chartPanel.getChart().getXYPlot().getDomainAxis().setLowerMargin(0.0);
        chartPanel.getChart().getXYPlot().getDomainAxis().setUpperMargin(0.0);
        return chartPanel;
    }

    public void createCroshair() {
        crosshair = new Crosshair(fromDataset.getX2()[jSWavelengths.getValue()]);
        crosshair.setPaint(Color.red);
        crosshair.setLabelVisible(true);
        crosshair.setLabelAnchor(RectangleAnchor.BOTTOM_RIGHT);
    }

    private void updateTrace(int xIndex) {
        boolean linlog = jTBLinLog.isSelected();
        XYSeriesCollection trace = null;
        XYSeriesCollection resid = null;
        XYSeriesCollection traceTo = null;
        XYSeriesCollection residTo = null;

        XYSeriesCollection traceLog = null;
        XYSeriesCollection residLog = null;
        XYSeriesCollection traceToLog = null;
        XYSeriesCollection residToLog = null;

        
        XYSeries emptySer = new XYSeries("");
        emptySer.add(0.0, 0.0);
        TimpResultDataset toDataset = null;
        int indexTo = 0;
        double toValue = 1;
        int toIndex;

        if (!linlog) {
            trace = CommonTools.createFitRawTraceCollection(xIndex, 0, fromDataset.getX().length, fromDataset, t0curveFrom[xIndex],"From");
            resid = CommonTools.createResidTraceCollection(xIndex, 0, fromDataset.getX().length, fromDataset, t0curveFrom[xIndex],"From");
        }
        else {
            double portion = Double.valueOf(jTFLinPart.getText());
            int index = 0;
            while (fromDataset.getX()[index] < t0curveFrom[xIndex] + portion) {
                index++;
            }
                if (index == 0) {
                index = 1;
            }
            trace = CommonTools.createFitRawTraceCollection(xIndex, 0, index, fromDataset, t0curveFrom[xIndex],"FromLin");
            resid = CommonTools.createResidTraceCollection(xIndex, 0, index, fromDataset, t0curveFrom[xIndex],"FromLin");
            traceLog = CommonTools.createFitRawTraceCollection(xIndex, index-1, fromDataset.getX().length, fromDataset, t0curveFrom[xIndex],"FromLog");
            residLog = CommonTools.createResidTraceCollection(xIndex, index-1, fromDataset.getX().length, fromDataset, t0curveFrom[xIndex],"FromLog");
        }
            for (int i = 0; i < relation.scaledDatasets.size(); i++) {
            indexTo = relation.scaledDatasets.get(i).indexTo;
            toDataset = resultDatasets.get(indexTo);
            toValue = relation.scaledDatasets.get(i).valueTo;
            if (toDataset.getX2().length > xIndex) {
                toIndex = CommonTools.findIndexForWave(fromDataset.getX2()[xIndex], threshhold, toDataset);
                if (toIndex != -1) {
                    if (!linlog) {
                        traceTo = CommonTools.createFitRawTraceCollection(toIndex, 0, toDataset.getX().length, toDataset, t0curvesTo.get(i)[toIndex], ("to" + i), toValue);
                        residTo = CommonTools.createResidTraceCollection(toIndex, 0, toDataset.getX().length, toDataset, t0curvesTo.get(i)[toIndex], ("to" + i), toValue);
                        trace.addSeries(traceTo.getSeries(0));
                        trace.addSeries(traceTo.getSeries(1));
                        resid.addSeries(residTo.getSeries(0));
                    } else {
                        double portion = Double.valueOf(jTFLinPart.getText());
                        int index = 0;
                        while (toDataset.getX()[index] < t0curvesTo.get(i)[xIndex] + portion) {
                            index++;
                        }
                        if (index == 0) {
                            index = 1;
                        }
                        traceTo = CommonTools.createFitRawTraceCollection(toIndex, 0, index, toDataset, t0curvesTo.get(i)[toIndex], ("toLin" + i),toValue);
                        residTo = CommonTools.createResidTraceCollection(toIndex, 0, index, toDataset, t0curvesTo.get(i)[toIndex], ("toLin"+ + i),toValue);
                        traceToLog = CommonTools.createFitRawTraceCollection(toIndex, index-1, toDataset.getX().length, toDataset, t0curvesTo.get(i)[toIndex], ("toLog"+i),toValue);
                        residToLog = CommonTools.createResidTraceCollection(toIndex, index-1, toDataset.getX().length, toDataset, t0curvesTo.get(i)[toIndex], ("toLog"+i),toValue);
                                               
                        trace.addSeries(traceTo.getSeries(0));
                        trace.addSeries(traceTo.getSeries(1));
                        resid.addSeries(residTo.getSeries(0));
                        traceLog.addSeries(traceToLog.getSeries(0));
                        traceLog.addSeries(traceToLog.getSeries(1));
                        residLog.addSeries(residToLog.getSeries(0));
                    }
                } else {
                    emptySer.setKey("EmptyTrace" + String.valueOf(i));
                    trace.addSeries(emptySer);
                    emptySer.setKey("EmptyFit" + String.valueOf(i));
                    trace.addSeries(emptySer);
                    emptySer.setKey("EmptyResid" + String.valueOf(i));
                    resid.addSeries(emptySer);
                    if (linlog){
                        emptySer.setKey("EmptyTraceLog" + String.valueOf(i));
                        traceLog.addSeries(emptySer);
                        emptySer.setKey("EmptyFitLog" + String.valueOf(i));
                        traceLog.addSeries(emptySer);
                        emptySer.setKey("EmptyResidLog" + String.valueOf(i));
                        residLog.addSeries(emptySer);
                    }
                }
            } else {
                emptySer.setKey("EmptyTrace" + String.valueOf(i));
                trace.addSeries(emptySer);
                emptySer.setKey("EmptyFit" + String.valueOf(i));
                trace.addSeries(emptySer);
                emptySer.setKey("EmptyResid" + String.valueOf(i));
                resid.addSeries(emptySer);
                if (linlog){
                    emptySer.setKey("EmptyTraceLog" + String.valueOf(i));
                    traceLog.addSeries(emptySer);
                    emptySer.setKey("EmptyFitLog" + String.valueOf(i));
                    traceLog.addSeries(emptySer);
                    emptySer.setKey("EmptyResidLog" + String.valueOf(i));
                    residLog.addSeries(emptySer);
                }
            }
        }
        
        ChartPanel tracesPanel = null;
        if (linlog){
            tracesPanel = CommonTools.makeLinLogTimeTraceResidChart(trace, resid, traceLog, residLog, null, true);
        }
        else {
            tracesPanel = CommonTools.makeLinTimeTraceResidChart(trace, resid, new NumberAxis("Time"), null, true);
        }
        jPTraces.removeAll();
        jPTraces.add(tracesPanel);
        jPTraces.validate();
    }
}
