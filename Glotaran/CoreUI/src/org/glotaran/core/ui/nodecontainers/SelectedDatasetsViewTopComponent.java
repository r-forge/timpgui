/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.glotaran.core.ui.nodecontainers;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.logging.Logger;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
public final class SelectedDatasetsViewTopComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private static SelectedDatasetsViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "SelectedDatasetsViewTopComponent";
    private ExplorerManager manager = new ExplorerManager();
    private DatasetView datasetView = new DatasetView();
    private DatasetNodeContainer container = new DatasetNodeContainer();

    public SelectedDatasetsViewTopComponent() {
        initComponents();
        setName(NbBundle.getBundle("org/glotaran/core/ui/nodecontainers/Bundle").getString("CTL_SelectedDatasetsViewTopComponent"));
        setToolTipText(NbBundle.getBundle("org/glotaran/core/ui/nodecontainers/Bundle").getString("HINT_SelectedDatasetsViewTopComponent"));
        manager.setRootContext(new AbstractNode(container, ExplorerUtils.createLookup(manager, getActionMap())));
        //setIcon(Utilities.loadImage(ICON_PATH, true));
        //manager.setRootContext(new AbstractNode(container,ExplorerUtils.createLookup(manager, getActionMap())) );
        //associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        remove = new javax.swing.JButton();
        panel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(200, 100));

        toolbar.setRollover(true);

        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/glotaran/core/main/resources/Delete-icon-16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(remove, org.openide.util.NbBundle.getBundle(SelectedDatasetsViewTopComponent.class).getString("SelectedDatasetsViewTopComponent.remove.text")); // NOI18N
        remove.setToolTipText(org.openide.util.NbBundle.getMessage(SelectedDatasetsViewTopComponent.class, "SelectedDatasetsViewTopComponent.remove.toolTipText")); // NOI18N
        remove.setFocusable(false);
        remove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        remove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        remove.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        toolbar.add(remove);

        panel.setLayout(new java.awt.BorderLayout());
        panel.add(datasetView, BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE).addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        container.remove(manager.getSelectedNodes());
    }//GEN-LAST:event_removeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    private javax.swing.JButton remove;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized SelectedDatasetsViewTopComponent getDefault() {
        if (instance == null) {
            instance = new SelectedDatasetsViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the SelectedDatasetsViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SelectedDatasetsViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(SelectedDatasetsViewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SelectedDatasetsViewTopComponent) {
            return (SelectedDatasetsViewTopComponent) win;
        }
        Logger.getLogger(SelectedDatasetsViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() == manager
                && ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
            setActivatedNodes(manager.getSelectedNodes());
        }
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return SelectedDatasetsViewTopComponent.getDefault();
        }
    }
}
