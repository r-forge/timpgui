/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.glotaran.core.ui.visualmodelling;

import java.awt.BorderLayout;
import java.util.logging.Logger;
import javax.swing.JComponent;
import org.glotaran.core.models.gta.GtaProjectScheme;
import org.glotaran.core.ui.visualmodelling.filesupport.GtaDataObject;
import org.glotaran.core.ui.visualmodelling.palette.PaletteSupport;
import org.glotaran.core.ui.visualmodelling.view.GraphSceneImpl;
import org.glotaran.core.ui.visualmodelling.view.SceneSerializer;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.filesystems.FileUtil;
import org.openide.util.lookup.Lookups;
import org.openide.windows.CloneableTopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd="-//org.glotaran.core.ui.visualmodelling//VisualModelling//EN",
    autostore=false
)
public final class VisualModellingTopComponent extends CloneableTopComponent {

    private static VisualModellingTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "VisualModellingTopComponent";
    private final JComponent myView;
    private GtaDataObject dobj;

    public VisualModellingTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(VisualModellingTopComponent.class, "CTL_VisualModellingTopComponent"));
        setToolTipText(NbBundle.getMessage(VisualModellingTopComponent.class, "HINT_VisualModellingTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        GraphSceneImpl scene = new GraphSceneImpl();
        myView = scene.createView();
        visualDesignScrollPane.setViewportView(myView);
        add(scene.createSatelliteView(), BorderLayout.WEST);

        setFocusable (true);
        setFocusTraversalKeysEnabled (false);

        associateLookup( Lookups.fixed( new Object[] { PaletteSupport.createPalette() } ) );

    }

    public VisualModellingTopComponent(GtaProjectScheme scheme) {
        initComponents();
        setName(NbBundle.getMessage(VisualModellingTopComponent.class, "CTL_VisualModellingTopComponent"));
        setToolTipText(NbBundle.getMessage(VisualModellingTopComponent.class, "HINT_VisualModellingTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        GraphSceneImpl scene = new GraphSceneImpl(scheme);
        myView = scene.createView();
        visualDesignScrollPane.setViewportView(myView);
        add(scene.createSatelliteView(), BorderLayout.WEST);

        setFocusable (true);
        setFocusTraversalKeysEnabled (false);

        associateLookup( Lookups.fixed( new Object[] { PaletteSupport.createPalette() } ) );
    }

    public VisualModellingTopComponent(GtaDataObject dobj) {
        initComponents();
        this.dobj = dobj;
        GtaProjectScheme scheme = dobj.getProgectScheme();
        setName(NbBundle.getMessage(VisualModellingTopComponent.class, "CTL_VisualModellingTopComponent"));
        setToolTipText(NbBundle.getMessage(VisualModellingTopComponent.class, "HINT_VisualModellingTopComponent"));
        setIcon(dobj.getNodeDelegate().getIcon(0));
        GraphSceneImpl scene = new GraphSceneImpl(scheme);
        myView = scene.createView();
        visualDesignScrollPane.setViewportView(myView);
        add(scene.createSatelliteView(), BorderLayout.WEST);
        setFocusable (true);
        setFocusTraversalKeysEnabled (false);
        associateLookup( Lookups.fixed( new Object[] { PaletteSupport.createPalette() } ) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        visualDesignScrollPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(visualDesignScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane visualDesignScrollPane;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized VisualModellingTopComponent getDefault() {
        if (instance == null) {
            instance = new VisualModellingTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the VisualModellingTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized VisualModellingTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(VisualModellingTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof VisualModellingTopComponent) {
            return (VisualModellingTopComponent) win;
        }
        Logger.getLogger(VisualModellingTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ONLY_OPENED;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        VisualModellingTopComponent singleton = VisualModellingTopComponent.getDefault();
        singleton.readPropertiesImpl(p);
        return singleton;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }


}
