/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DatasetContainerComponent.java
 *
 * Created on Jul 15, 2009, 10:18:18 AM
 */

package org.glotaran.core.ui.visualmodelling.components;

import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import org.glotaran.core.ui.visualmodelling.nodes.DatasetsRootNode;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Index;
import org.openide.util.Lookup;
import org.openide.windows.WindowManager;

/**
 *
 * @author slk230
 */
public class DatasetContainerComponent
        extends JPanel
        implements ExplorerManager.Provider, Lookup.Provider, PropertyChangeListener {

/** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "DatasetsListView";

    private ExplorerManager manager = new ExplorerManager();
    private DatasetSpecificationView datasetView  = new DatasetSpecificationView();
//    private DatasetNodeContainer container = new DatasetNodeContainer();
    private Lookup lookup;

    /** Creates new form DatasetContainerComponent */
    public DatasetContainerComponent() {
        initComponents();
        jPDatasetsPanel.add(datasetView);       
        //datasetView.setPreferredSize(new Dimension(150, 150));
//        ExplorerUtils.createLookup(manager, null)));
//        new ProxyLookup(arg0)
        ActionMap map = this.getActionMap ();
        map.put("delete", ExplorerUtils.actionDelete(manager, true)); // or false
        InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        keys.put(KeyStroke.getKeyStroke("DELETE"), "delete");
        lookup = ExplorerUtils.createLookup(manager, map);
        manager.setRootContext(new DatasetsRootNode(new Index.ArrayChildren()));
        manager.addPropertyChangeListener(this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        modelDiffsScrollPane = new javax.swing.JScrollPane();
        modelDiffsPanel = new javax.swing.JPanel();
        datasetsScrollPane = new javax.swing.JScrollPane();
        jPDatasetsPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setMinimumSize(null);
        jSplitPane1.setPreferredSize(null);

        modelDiffsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        modelDiffsScrollPane.setViewportView(modelDiffsPanel);

        jSplitPane1.setRightComponent(modelDiffsScrollPane);

        jPDatasetsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        datasetsScrollPane.setViewportView(jPDatasetsPanel);

        jSplitPane1.setLeftComponent(datasetsScrollPane);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane datasetsScrollPane;
    private javax.swing.JPanel jPDatasetsPanel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel modelDiffsPanel;
    private javax.swing.JScrollPane modelDiffsScrollPane;
    // End of variables declaration//GEN-END:variables

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() == manager &&
                ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
            WindowManager.getDefault().getRegistry().getActivated().setActivatedNodes(manager.getSelectedNodes());
        }
    }
}
