/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package nl.wur.flimdataloader.components;

import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import nl.vu.nat.timpinterface.Register;
import nl.wur.flim.jfreechartcustom.ColorCodedImageDataset;
import nl.wur.flim.jfreechartcustom.RainbowPaintScale;
import nl.vu.nat.jfreechartcustom.XYBlockRenderer;
import nl.wur.flimdataloader.flimpac.DatasetTimp;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import nl.vu.nat.jfreechartcustom.FastXYPlot;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
//import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.PaintScale;
//import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.XYZDataset;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.RectangleInsets;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class StreakLoaderTopComponent extends TopComponent implements ChartMouseListener {

    private static StreakLoaderTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "StreakLoaderTopComponent";
    
    private JFileChooser fc;
    private JFreeChart chart;
    private ChartPanel chpanImage;
    private XYSeriesCollection timeTracesCollection, waveTracesCollection;
    private DatasetTimp data;
    private ColorCodedImageDataset dataset;

    private StreakLoaderTopComponent() {
        fc = new JFileChooser();
        fc.setAcceptAllFileFilterUsed(true);
        //fc.setFileFilter(new FileNameExtensionFilter(" .ivo ASCII files", "ivo"));
        data = new DatasetTimp();
        initComponents();
        setName(NbBundle.getMessage(StreakLoaderTopComponent.class, "CTL_StreakLoaderTopComponent"));
        setToolTipText(NbBundle.getMessage(StreakLoaderTopComponent.class, "HINT_StreakLoaderTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel_Dataset = new javax.swing.JPanel();
        jPanel_1LoadDataset = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jBSaveIvoFile = new javax.swing.JButton();
        Bloadsamp = new javax.swing.JButton();
        jBMakeDataset = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        TFfilenam = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTFDatasetName = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLTimeWind = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLWavewind = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLTimsteps = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLWavesteps = new javax.swing.JLabel();
        jPanel_2RegionSelect = new javax.swing.JPanel();
        jPStreakImage = new javax.swing.JPanel();
        jPSelectedTimeTrace = new javax.swing.JPanel();
        jPSelectedWaveTrace = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setAutoscrolls(true);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jPanel_Dataset.setLayout(new java.awt.GridBagLayout());

        jPanel_1LoadDataset.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jPanel_1LoadDataset.border.title"))); // NOI18N
        jPanel_1LoadDataset.setMaximumSize(new java.awt.Dimension(700, 150));
        jPanel_1LoadDataset.setMinimumSize(new java.awt.Dimension(700, 150));
        jPanel_1LoadDataset.setPreferredSize(new java.awt.Dimension(700, 150));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jPanel6.border.title"))); // NOI18N
        jPanel6.setLayout(null);

        org.openide.awt.Mnemonics.setLocalizedText(jBSaveIvoFile, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jBSaveIvoFile.text")); // NOI18N
        jBSaveIvoFile.setEnabled(false);
        jPanel6.add(jBSaveIvoFile);
        jBSaveIvoFile.setBounds(10, 80, 128, 25);

        org.openide.awt.Mnemonics.setLocalizedText(Bloadsamp, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.Bloadsamp.text")); // NOI18N
        Bloadsamp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BloadsampActionPerformed(evt);
            }
        });
        jPanel6.add(Bloadsamp);
        Bloadsamp.setBounds(10, 20, 123, 25);

        org.openide.awt.Mnemonics.setLocalizedText(jBMakeDataset, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jBMakeDataset.text")); // NOI18N
        jBMakeDataset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMakeDatasetActionPerformed(evt);
            }
        });
        jPanel6.add(jBMakeDataset);
        jBMakeDataset.setBounds(10, 50, 126, 25);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jPanel1.border.title"))); // NOI18N
        jPanel1.setLayout(null);

        TFfilenam.setEditable(false);
        TFfilenam.setText(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.TFfilenam.text")); // NOI18N
        jPanel1.add(TFfilenam);
        TFfilenam.setBounds(10, 40, 160, 20);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel1.text")); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 20, 64, 15);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jPanel4.border.title"))); // NOI18N
        jPanel4.setMaximumSize(new java.awt.Dimension(400, 120));
        jPanel4.setMinimumSize(new java.awt.Dimension(200, 120));
        jPanel4.setPreferredSize(new java.awt.Dimension(200, 120));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel14.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel14.setMinimumSize(new java.awt.Dimension(100, 30));
        jPanel14.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel14.setLayout(null);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel5.text")); // NOI18N
        jPanel14.add(jLabel5);
        jLabel5.setBounds(10, 10, 87, 15);

        jTFDatasetName.setText(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jTFDatasetName.text")); // NOI18N
        jPanel14.add(jTFDatasetName);
        jTFDatasetName.setBounds(110, 10, 200, 19);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel14, gridBagConstraints);

        jPanel13.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel7.text")); // NOI18N
        jPanel15.add(jLabel7);

        org.openide.awt.Mnemonics.setLocalizedText(jLTimeWind, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLTimeWind.text")); // NOI18N
        jPanel15.add(jLTimeWind);

        jPanel13.add(jPanel15, new java.awt.GridBagConstraints());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel8.text")); // NOI18N
        jPanel16.add(jLabel8);

        org.openide.awt.Mnemonics.setLocalizedText(jLWavewind, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLWavewind.text")); // NOI18N
        jPanel16.add(jLWavewind);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel13.add(jPanel16, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel6.text")); // NOI18N
        jPanel17.add(jLabel6);

        org.openide.awt.Mnemonics.setLocalizedText(jLTimsteps, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLTimsteps.text")); // NOI18N
        jPanel17.add(jLTimsteps);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel13.add(jPanel17, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel9.text")); // NOI18N
        jPanel18.add(jLabel9);

        org.openide.awt.Mnemonics.setLocalizedText(jLWavesteps, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLWavesteps.text")); // NOI18N
        jPanel18.add(jLWavesteps);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel13.add(jPanel18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel13, gridBagConstraints);

        javax.swing.GroupLayout jPanel_1LoadDatasetLayout = new javax.swing.GroupLayout(jPanel_1LoadDataset);
        jPanel_1LoadDataset.setLayout(jPanel_1LoadDatasetLayout);
        jPanel_1LoadDatasetLayout.setHorizontalGroup(
            jPanel_1LoadDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_1LoadDatasetLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel_1LoadDatasetLayout.setVerticalGroup(
            jPanel_1LoadDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_1LoadDatasetLayout.createSequentialGroup()
                .addGroup(jPanel_1LoadDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel_Dataset.add(jPanel_1LoadDataset, gridBagConstraints);
        jPanel_1LoadDataset.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jPanel3.AccessibleContext.accessibleName")); // NOI18N

        jPanel_2RegionSelect.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jPanel_2RegionSelect.border.title"))); // NOI18N
        jPanel_2RegionSelect.setMaximumSize(new java.awt.Dimension(820, 540));
        jPanel_2RegionSelect.setMinimumSize(new java.awt.Dimension(820, 540));
        jPanel_2RegionSelect.setPreferredSize(new java.awt.Dimension(820, 540));

        jPStreakImage.setBackground(new java.awt.Color(0, 0, 0));
        jPStreakImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPStreakImage.setMaximumSize(new java.awt.Dimension(550, 400));
        jPStreakImage.setMinimumSize(new java.awt.Dimension(550, 400));
        jPStreakImage.setPreferredSize(new java.awt.Dimension(550, 400));
        jPStreakImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPStreakImageMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPStreakImageLayout = new javax.swing.GroupLayout(jPStreakImage);
        jPStreakImage.setLayout(jPStreakImageLayout);
        jPStreakImageLayout.setHorizontalGroup(
            jPStreakImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 546, Short.MAX_VALUE)
        );
        jPStreakImageLayout.setVerticalGroup(
            jPStreakImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );

        jPSelectedTimeTrace.setBackground(new java.awt.Color(255, 255, 255));
        jPSelectedTimeTrace.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPSelectedTimeTrace.setMaximumSize(new java.awt.Dimension(550, 300));
        jPSelectedTimeTrace.setMinimumSize(new java.awt.Dimension(256, 200));
        jPSelectedTimeTrace.setPreferredSize(new java.awt.Dimension(550, 300));

        javax.swing.GroupLayout jPSelectedTimeTraceLayout = new javax.swing.GroupLayout(jPSelectedTimeTrace);
        jPSelectedTimeTrace.setLayout(jPSelectedTimeTraceLayout);
        jPSelectedTimeTraceLayout.setHorizontalGroup(
            jPSelectedTimeTraceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );
        jPSelectedTimeTraceLayout.setVerticalGroup(
            jPSelectedTimeTraceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        jPSelectedWaveTrace.setBackground(new java.awt.Color(255, 255, 255));
        jPSelectedWaveTrace.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPSelectedWaveTrace.setMaximumSize(new java.awt.Dimension(250, 200));
        jPSelectedWaveTrace.setMinimumSize(new java.awt.Dimension(250, 200));
        jPSelectedWaveTrace.setPreferredSize(new java.awt.Dimension(250, 200));

        javax.swing.GroupLayout jPSelectedWaveTraceLayout = new javax.swing.GroupLayout(jPSelectedWaveTrace);
        jPSelectedWaveTrace.setLayout(jPSelectedWaveTraceLayout);
        jPSelectedWaveTraceLayout.setHorizontalGroup(
            jPSelectedWaveTraceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );
        jPSelectedWaveTraceLayout.setVerticalGroup(
            jPSelectedWaveTraceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jPanel19.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jLabel3.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jTextField2.text")); // NOI18N
        jTextField2.setEnabled(false);
        jTextField2.setMinimumSize(new java.awt.Dimension(60, 20));

        jTextField3.setText(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jTextField3.text")); // NOI18N
        jTextField3.setEnabled(false);
        jTextField3.setMinimumSize(new java.awt.Dimension(60, 20));

        jTextField4.setText(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jTextField4.text")); // NOI18N
        jTextField4.setEnabled(false);
        jTextField4.setMinimumSize(new java.awt.Dimension(60, 20));

        jTextField5.setText(org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jTextField5.text")); // NOI18N
        jTextField5.setEnabled(false);
        jTextField5.setMinimumSize(new java.awt.Dimension(60, 20));

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(StreakLoaderTopComponent.class, "StreakLoaderTopComponent.jButton2.text")); // NOI18N
        jButton2.setEnabled(false);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(53, 53, 53))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(151, 151, 151))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel_2RegionSelectLayout = new javax.swing.GroupLayout(jPanel_2RegionSelect);
        jPanel_2RegionSelect.setLayout(jPanel_2RegionSelectLayout);
        jPanel_2RegionSelectLayout.setHorizontalGroup(
            jPanel_2RegionSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_2RegionSelectLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel_2RegionSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_2RegionSelectLayout.createSequentialGroup()
                        .addComponent(jPStreakImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel_2RegionSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPSelectedWaveTrace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPSelectedTimeTrace, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5))
        );
        jPanel_2RegionSelectLayout.setVerticalGroup(
            jPanel_2RegionSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_2RegionSelectLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel_2RegionSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPStreakImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_2RegionSelectLayout.createSequentialGroup()
                        .addComponent(jPSelectedWaveTrace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPSelectedTimeTrace, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel_Dataset.add(jPanel_2RegionSelect, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel_Dataset);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents

private void BloadsampActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BloadsampActionPerformed
// TODO add your handling code here:
    int returnVal = fc.showOpenDialog(this);

    if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
            File file = fc.getSelectedFile();
            TFfilenam.setText(file.getAbsolutePath());
            data.LoadIvoFile(file);
            MakeImageChart(MakeXYZDataset());  
            MakeWaveTraceChart(PlotFirstTrace(false));
            MakeTimeTraceChart(PlotFirstTrace(true));
            chpanImage = new ChartPanel(chart,true);
            jPStreakImage.removeAll();
            chpanImage.setSize(jPStreakImage.getSize());
            chpanImage.addChartMouseListener(this);

            jPStreakImage.add(chpanImage);
            jPStreakImage.repaint(); 
            jLTimsteps.setText(Integer.toString(data.GetNt()[0]));
            jLWavewind.setText(Double.toString(data.GetX2()[data.GetX2().length-1]-data.GetX2()[0]));
            jLTimeWind.setText(Double.toString(data.GetX()[data.GetX().length-1]-data.GetX()[0]));
            jLWavesteps.setText(Integer.toString(data.GetNl()[0]));

            
        } catch (FileNotFoundException ex) {
            System.out.println("File not found");
        } catch (IOException ex) {
            System.out.println("IOException");
        } catch (IllegalAccessException ex) {
            System.out.println("IllegalAccessException");
        } catch (InstantiationException ex) {
            System.out.println("InstantiationException");
        }
    }
}//GEN-LAST:event_BloadsampActionPerformed

private void jBMakeDatasetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMakeDatasetActionPerformed
// TODO add your handling code here:
    Register.RegisterData(data);
}//GEN-LAST:event_jBMakeDatasetActionPerformed

private void jPStreakImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPStreakImageMouseClicked
// TODO add your han   dling code here:
}//GEN-LAST:event_jPStreakImageMouseClicked

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bloadsamp;
    private javax.swing.JTextField TFfilenam;
    private javax.swing.JButton jBMakeDataset;
    private javax.swing.JButton jBSaveIvoFile;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLTimeWind;
    private javax.swing.JLabel jLTimsteps;
    private javax.swing.JLabel jLWavesteps;
    private javax.swing.JLabel jLWavewind;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPSelectedTimeTrace;
    private javax.swing.JPanel jPSelectedWaveTrace;
    private javax.swing.JPanel jPStreakImage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel_1LoadDataset;
    private javax.swing.JPanel jPanel_2RegionSelect;
    private javax.swing.JPanel jPanel_Dataset;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFDatasetName;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized StreakLoaderTopComponent getDefault() {
        if (instance == null) {
            instance = new StreakLoaderTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the StreakLoaderTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized StreakLoaderTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(StreakLoaderTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof StreakLoaderTopComponent) {
            return (StreakLoaderTopComponent) win;
        }
        Logger.getLogger(StreakLoaderTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return StreakLoaderTopComponent.getDefault();
        }
    }
    
     private XYSeriesCollection PlotFirstTrace(boolean mode){
        if (mode){
             timeTracesCollection = new XYSeriesCollection();
             XYSeries seria = new XYSeries("TimeTrace");
             for (int j=0; j<data.GetNt()[0]; j++){
                 seria.add(data.GetX()[j], data.GetPsisim()[j]);
             }
            timeTracesCollection.addSeries(seria);
            return timeTracesCollection;         
        }
        else {
            waveTracesCollection = new XYSeriesCollection();
            XYSeries seria = new XYSeries("WaveTrace");
            for (int j=0; j<data.GetNl()[0]; j++){
                seria.add(data.GetX2()[j], data.GetPsisim()[j*data.GetNt()[0]]);
            }
            waveTracesCollection.addSeries(seria);
            return waveTracesCollection;         
            
        }
    }
    
    private void UpdateSelectedTimeTrace(int index){
        timeTracesCollection.getSeries(0).clear();
        for (int j=0; j<data.GetNt()[0]; j++){
            timeTracesCollection.getSeries(0).add(data.GetX()[j], data.GetPsisim()[index*data.GetNt()[0]+j]);
        }
    }
    
    private void UpdateSelectedWaveTrace(int index){
        waveTracesCollection.getSeries(0).clear();
        for (int j=0; j<data.GetNl()[0]; j++){
            waveTracesCollection.getSeries(0).add(data.GetX2()[j], data.GetPsisim()[j*data.GetNt()[0]+index]);
        }
    }
    
    private void MakeTimeTraceChart(XYSeriesCollection dat){   
        JFreeChart tracechart;        
        tracechart = ChartFactory.createXYLineChart(
            "Selected trace", 
            "Time (ns)",
            "Number of counts", 
            dat, 
            PlotOrientation.VERTICAL, 
            false, 
            false, 
            false
        );
        tracechart.getXYPlot().getDomainAxis().setUpperBound(data.GetX()[data.GetX().length-1]);
//        tracechart.getXYPlot().setDomainZeroBaselineVisible(true);
        ChartPanel chpan = new ChartPanel(tracechart,true);
        chpan.setSize(jPSelectedTimeTrace.getSize());
        jPSelectedTimeTrace.removeAll();
        jPSelectedTimeTrace.add(chpan);
        jPSelectedTimeTrace.repaint(); 
    }

    private void MakeWaveTraceChart(XYSeriesCollection dat){   
        JFreeChart tracechart;        
        tracechart = ChartFactory.createXYLineChart(
            "Selected Spectrum", 
            "Wavelength (nm)",
            "Number of counts", 
            dat, 
            PlotOrientation.VERTICAL, 
            false, 
            false, 
            false
        );
        if (data.GetX2()[data.GetX2().length-1]<data.GetX2()[0])
            tracechart.getXYPlot().getDomainAxis().setUpperBound(data.GetX2()[0]);
        else 
            tracechart.getXYPlot().getDomainAxis().setUpperBound(data.GetX2()[data.GetX2().length-1]);
        //tracechart.getXYPlot().setDomainZeroBaselineVisible(true);
        ChartPanel chpan = new ChartPanel(tracechart,true);
        chpan.setSize(jPSelectedWaveTrace.getSize());
        jPSelectedWaveTrace.removeAll();
        jPSelectedWaveTrace.add(chpan);
        jPSelectedWaveTrace.repaint(); 
    }
    
    private XYZDataset MakeXYZDataset(){ 
        DefaultXYZDataset dataset2 = new DefaultXYZDataset();
        double[] xValues  = new double[data.GetNl()[0]*data.GetNt()[0]];
        double[] yValues  = new double[data.GetNl()[0]*data.GetNt()[0]];
        
        for (int i = 0; i<data.GetNt()[0]; i++){
            for (int j = 0; j<data.GetNl()[0]; j++){
                xValues[j*data.GetNt()[0]+i] = data.GetX2()[j];
                yValues[j*data.GetNt()[0]+i] = data.GetX()[i];
            }
        }
        double[][] chartdata = {xValues,yValues,data.GetPsisim()};
        dataset2.addSeries("Streak image", chartdata);
        
        dataset = new ColorCodedImageDataset(data.GetNl()[0],data.GetNt()[0],data.GetPsisim(), true);
        return dataset;
    }
    
    private void MakeImageChart(XYZDataset dataset){
        NumberAxis xAxis = new NumberAxis("Wavelengts (nm)");
        xAxis.setLowerMargin(0.0);
        xAxis.setUpperMargin(0.0);
//        xAxis.setRange(data.GetX2()[0],data.GetX2()[data.GetX2().length-1]);      
        xAxis.setVisible(false);
        NumberAxis yAxis = new NumberAxis("Time (ps)");
        yAxis.setAutoRangeIncludesZero(false);
        yAxis.setInverted(true);
        yAxis.setLowerMargin(0.0);
        yAxis.setUpperMargin(0.0);
 //       yAxis.setRange(data.GetX()[0],data.GetX()[data.GetX().length-1]);
        yAxis.setVisible(false);
        XYBlockRenderer renderer = new XYBlockRenderer();
        PaintScale scale = new RainbowPaintScale(data.GetMinInt(), data.GetMaxInt());
        renderer.setPaintScale(scale);
        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);        
   
        plot.setDomainCrosshairVisible(false);
        plot.setDomainCrosshairLockedOnData(false);
        plot.setRangeCrosshairVisible(false);
        plot.setRangeCrosshairLockedOnData(false);

        chart = new JFreeChart(plot);
        chart.setAntiAlias(false);
        chart.removeLegend();
  
        NumberAxis scaleAxis = new NumberAxis();
        scaleAxis.setAxisLinePaint(Color.black);
        scaleAxis.setTickMarkPaint(Color.black);
        scaleAxis.setRange(data.GetMinInt(),data.GetMaxInt());
        scaleAxis.setTickLabelFont(new Font("Dialog", Font.PLAIN, 9));
        PaintScaleLegend legend = new PaintScaleLegend(scale,scaleAxis);
        legend.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);
    //        legend.setAxisOffset(5.0);
        legend.setMargin(new RectangleInsets(5, 5, 5, 5));
    //        legend.setFrame(new BlockBorder(Color.red));
    //        legend.setPadding(new RectangleInsets(5, 5, 5, 5));
        legend.setStripWidth(15);
        legend.setPosition(RectangleEdge.RIGHT);
        legend.setBackgroundPaint(chart.getBackgroundPaint());
        chart.addSubtitle(legend);
        
    }
    
    public void chartMouseClicked(ChartMouseEvent event) {

        int mouseX = event.getTrigger().getX();
        int mouseY = event.getTrigger().getY();
        Point2D p = this.chpanImage.translateScreenToJava2D(new Point(mouseX, mouseY));
        XYPlot plot = (XYPlot) this.chart.getPlot();
        ChartRenderingInfo info = this.chpanImage.getChartRenderingInfo();
        Rectangle2D dataArea = info.getPlotInfo().getDataArea();
        
        ValueAxis domainAxis = plot.getDomainAxis();
        RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
        ValueAxis rangeAxis = plot.getRangeAxis();
        RectangleEdge rangeAxisEdge = plot.getRangeAxisEdge();
            
        int chartX =  (int) (domainAxis.java2DToValue(p.getX(), dataArea, domainAxisEdge));
        int chartY =  (int) (rangeAxis.java2DToValue(p.getY(), dataArea, rangeAxisEdge));
        
//        System.out.println(chartX+"    "+chartY);
        
        UpdateSelectedWaveTrace(chartY);
        UpdateSelectedTimeTrace(chartX);
        
    }

    public void chartMouseMoved(ChartMouseEvent event) {
//         System.out.println("ChartMouseMoved");
    }
}
