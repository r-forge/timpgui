/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.timpgui.projectmanagement;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.logging.Logger;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
public final class SelectedModelsViewTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static SelectedModelsViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "SelectedModelsViewTopComponent";

   private ExplorerManager manager   = new ExplorerManager();
   private ModelsView    modelsView  = new ModelsView();
   private ModelsNodeContainer   container = new ModelsNodeContainer();

    private SelectedModelsViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(SelectedModelsViewTopComponent.class, "CTL_SelectedModelsViewTopComponent"));
        setToolTipText(NbBundle.getMessage(SelectedModelsViewTopComponent.class, "HINT_SelectedModelsViewTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        manager.setRootContext(new AbstractNode(container));
        associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        remove = new javax.swing.JButton();
        panel = new javax.swing.JPanel();

        toolbar.setRollover(true);

        remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/timpgui/projectmanagement/delete.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(remove, org.openide.util.NbBundle.getMessage(SelectedModelsViewTopComponent.class, "SelectedDatasetsViewTopComponent.remove.text")); // NOI18N
        remove.setToolTipText(org.openide.util.NbBundle.getMessage(SelectedModelsViewTopComponent.class, "SelectedDatasetsViewTopComponent.remove.toolTipText")); // NOI18N
        remove.setFocusable(false);
        remove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        remove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        toolbar.add(remove);

        panel.setLayout(new java.awt.BorderLayout());
        panel.add(modelsView, BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        container.remove(manager.getSelectedNodes());
}//GEN-LAST:event_removeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    private javax.swing.JButton remove;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized SelectedModelsViewTopComponent getDefault() {
        if (instance == null) {
            instance = new SelectedModelsViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the SelectedModelsViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SelectedModelsViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(SelectedModelsViewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SelectedModelsViewTopComponent) {
            return (SelectedModelsViewTopComponent) win;
        }
        Logger.getLogger(SelectedModelsViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return SelectedModelsViewTopComponent.getDefault();
        }
    }
}
