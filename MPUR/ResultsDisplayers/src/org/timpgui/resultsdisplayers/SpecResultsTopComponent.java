/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.timpgui.resultsdisplayers;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.Serializable;
import java.util.logging.Logger;
import nl.wur.flim.jfreechartcustom.ColorCodedImageDataset;
import nl.wur.flim.jfreechartcustom.ImageCrosshairLabelGenerator;
import nl.wur.flim.jfreechartcustom.ImageUtilities;
import nl.wur.flim.jfreechartcustom.RainbowPaintScale;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYDataImageAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.panel.CrosshairOverlay;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.Crosshair;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.Range;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.Layer;
import org.jfree.ui.RectangleAnchor;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.timpgui.structures.TimpResultDataset;
import org.timpgui.tgproject.datasets.TimpResultDataObject;
/**
 * Top component which displays something.
 */
public final class SpecResultsTopComponent extends TopComponent implements ChartMouseListener {

    private static SpecResultsTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "StreakOutTopComponent";
    private TimpResultDataset res;
    private ChartPanel chpanImage;
    private JFreeChart chart;
    private XYSeriesCollection tracesTimeCollection;
    private XYSeriesCollection residualsTime;
    private XYSeriesCollection tracesWaveCollection;
    private XYSeriesCollection residualsWave;
    private Range lastXRange;
    private Range lastYRange;
    private Range wholeXRange;
    private Range wholeYRange;
    private Crosshair crosshair1;
    private Crosshair crosshair2;
    private JFreeChart chartMain;
    private ColorCodedImageDataset dataset;


    public SpecResultsTopComponent(TimpResultDataObject dataObj) {
        initComponents();
        setToolTipText(NbBundle.getMessage(SpecResultsTopComponent.class, "HINT_StreakOutTopComponent"));
        setName(dataObj.getName());
        res = dataObj.getTimpResultDataset();
        res.CalcRangeInt();
        Object[] rates = new Object[res.GetKineticParameters().length/2];
        for (int i = 0; i < res.GetKineticParameters().length/2; i++) {
            rates[i] = "k" + (i + 1) + "=" + res.GetKineticParameters()[i] + " ns";
        }
        jLKineticParameters.setListData(rates);

        MakeImageChart();




//        MakeImageChart(MakeXYZDataset());
//        chpanImage.getChartRenderingInfo().setEntityCollection(null);
//        jPSpecImage.removeAll();
//        chpanImage.setSize(jPStreakImage.getMaximumSize());
//        chpanImage.addChartMouseListener(this);

//        jPSpecImage.add(chpanImage);
//        jPSpecImage.repaint();

        PlotFirstTrace();
        MakeTracesChart();
        PlotConcSpectrTrace();
        
    }
//    private ArrayList<ResultObject> resultObjects;

    private SpecResultsTopComponent() {

        initComponents();

//        setName(NbBundle.getMessage(SpecResultsTopComponent.class, "CTL_StreakOutTopComponent"));
//        setToolTipText(NbBundle.getMessage(SpecResultsTopComponent.class, "HINT_StreakOutTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPSpectras = new javax.swing.JPanel();
        jPConcentrations = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLKineticParameters = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLSpectralParameters = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPSelectedTimeTrace = new javax.swing.JPanel();
        jPSelectedWaveTrace = new javax.swing.JPanel();
        jPSpecImage = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(0, 2));

        jPSpectras.setBackground(new java.awt.Color(255, 255, 255));
        jPSpectras.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPSpectras.setPreferredSize(new java.awt.Dimension(230, 110));
        jPSpectras.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPSpectras);

        jPConcentrations.setBackground(new java.awt.Color(255, 255, 255));
        jPConcentrations.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPConcentrations.setPreferredSize(new java.awt.Dimension(230, 110));
        jPConcentrations.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPConcentrations);

        jPanel7.setLayout(new java.awt.GridLayout(1, 2));

        jLKineticParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("KinParameters"));
        jScrollPane1.setViewportView(jLKineticParameters);

        jPanel7.add(jScrollPane1);

        jLSpectralParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("SpecParameters"));
        jScrollPane2.setViewportView(jLSpectralParameters);

        jPanel7.add(jScrollPane2);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(924, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(SpecResultsTopComponent.class, "SpecResultsTopComponent.jPanel6.TabConstraints.tabTitle"), jPanel6); // NOI18N

        jPanel1.setLayout(new java.awt.GridLayout(2, 0));

        jPSelectedTimeTrace.setBackground(new java.awt.Color(255, 255, 255));
        jPSelectedTimeTrace.setMaximumSize(new java.awt.Dimension(450, 350));
        jPSelectedTimeTrace.setMinimumSize(new java.awt.Dimension(450, 350));
        jPSelectedTimeTrace.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPSelectedTimeTrace);

        jPSelectedWaveTrace.setBackground(new java.awt.Color(255, 255, 255));
        jPSelectedWaveTrace.setMaximumSize(new java.awt.Dimension(450, 150));
        jPSelectedWaveTrace.setMinimumSize(new java.awt.Dimension(450, 150));
        jPSelectedWaveTrace.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPSelectedWaveTrace);

        jPSpecImage.setBackground(new java.awt.Color(0, 0, 0));
        jPSpecImage.setMaximumSize(new java.awt.Dimension(450, 350));
        jPSpecImage.setMinimumSize(new java.awt.Dimension(450, 350));
        jPSpecImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPSpecImageMouseClicked(evt);
            }
        });
        jPSpecImage.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPSpecImage, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPSpecImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 326, Short.MAX_VALUE))
                .addContainerGap(796, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(SpecResultsTopComponent.class, "SpecResultsTopComponent.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        add(jTabbedPane1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jPSpecImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPSpecImageMouseClicked
// TODO add your han   dling code here:
}//GEN-LAST:event_jPSpecImageMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jLKineticParameters;
    private javax.swing.JList jLSpectralParameters;
    private javax.swing.JPanel jPConcentrations;
    private javax.swing.JPanel jPSelectedTimeTrace;
    private javax.swing.JPanel jPSelectedWaveTrace;
    private javax.swing.JPanel jPSpecImage;
    private javax.swing.JPanel jPSpectras;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized SpecResultsTopComponent getDefault() {
        if (instance == null) {
            instance = new SpecResultsTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the StreakOutTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SpecResultsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(SpecResultsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SpecResultsTopComponent) {
            return (SpecResultsTopComponent) win;
        }
        Logger.getLogger(SpecResultsTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return SpecResultsTopComponent.getDefault();
        }
    }

    private void UpdateSelectedTraces(int waveInd, int timeInd) {
        tracesTimeCollection.getSeries(0).clear();
        tracesTimeCollection.getSeries(1).clear();
        residualsTime.getSeries(0).clear();
        tracesWaveCollection.getSeries(0).clear();
        tracesWaveCollection.getSeries(1).clear();
        residualsWave.getSeries(0).clear();

        for (int j = 0; j < res.GetX().length; j++) {
            tracesTimeCollection.getSeries(0).add(res.GetX()[j], res.GetTraces().get(j, timeInd));
            tracesTimeCollection.getSeries(1).add(res.GetX()[j], res.GetFittedTraces().get(j, timeInd));
            residualsTime.getSeries(0).add(res.GetX()[j], res.GetResiduals().get(j, timeInd));
        }

        for (int j = 0; j < res.GetX2().length; j++) {
            tracesWaveCollection.getSeries(0).add(res.GetX2()[j], res.GetTraces().get(j, waveInd));
            tracesWaveCollection.getSeries(1).add(res.GetX2()[j], res.GetFittedTraces().get(j, waveInd));
            residualsWave.getSeries(0).add(res.GetX2()[j], res.GetResiduals().get(j, waveInd));
        }

    }

    private void PlotFirstTrace() {
        tracesTimeCollection = new XYSeriesCollection();
        residualsTime = new XYSeriesCollection();
        tracesWaveCollection = new XYSeriesCollection();
        residualsWave = new XYSeriesCollection();

        XYSeries seriaData = new XYSeries("Trace");
        XYSeries seriaFit = new XYSeries("Fittedtrace");
        XYSeries resid = new XYSeries("Residuals");
        for (int j = 0; j < res.GetX().length; j++) {
            seriaData.add(res.GetX()[j], res.GetTraces().get(j, 0));
            seriaFit.add(res.GetX()[j], res.GetFittedTraces().get(j, 0));
            resid.add(res.GetX()[j], res.GetResiduals().get(j, 0));
        }
        tracesTimeCollection.addSeries(seriaData);
        tracesTimeCollection.addSeries(seriaFit);
        residualsTime.addSeries(resid);

        seriaData = new XYSeries("Trace");
        seriaFit = new XYSeries("Fittedtrace");
        resid = new XYSeries("Residuals");
        for (int j = 0; j < res.GetX2().length; j++) {
            seriaData.add(res.GetX2()[j], res.GetTraces().get(0, j));
            seriaFit.add(res.GetX2()[j], res.GetFittedTraces().get(0, j));
            resid.add(res.GetX2()[j], res.GetResiduals().get(0, j));
        }

        tracesWaveCollection.addSeries(seriaData);
        tracesWaveCollection.addSeries(seriaFit);
        residualsWave.addSeries(resid);

    }

    private void PlotConcSpectrTrace() {
        XYSeriesCollection concCollection = new XYSeriesCollection();
        XYSeriesCollection specCollection = new XYSeriesCollection();

        XYSeries seria;


        for (int j = 0; j < res.GetKineticParameters().length/2; j++) {
            seria = new XYSeries("Conc" + (j + 1));
            for (int i = 0; i < res.GetX().length; i++) {
                seria.add(res.GetX()[i], res.GetConcentrations().get(i, j));
            }
            concCollection.addSeries(seria);
        }

        for (int j = 0; j < res.GetKineticParameters().length/2; j++) {
            seria = new XYSeries("Spec" + (j + 1));
            for (int i = 0; i < res.GetX2().length; i++) {
                seria.add(res.GetX2()[i], res.GetSpectras().get(j, i));
            }
            specCollection.addSeries(seria);
        }
        JFreeChart tracechart;
        // update multiple attributes in the chart, plot, axes, renderer(s), dataset(s) etc.
        tracechart = ChartFactory.createXYLineChart(
                "Concentration",
                "Time (ns)",
                "Number of counts",
                concCollection,
                PlotOrientation.VERTICAL,
                false,
                false,
                false);
        tracechart.getXYPlot().getDomainAxis().setUpperBound(res.GetX()[res.GetX().length - 1]);
//        tracechart.getXYPlot().setDomainZeroBaselineVisible(true);
        ChartPanel chpan = new ChartPanel(tracechart);
        chpan.getChartRenderingInfo().setEntityCollection(null);
//        chpan.setSize(jPConcentrations.getMaximumSize());
        jPConcentrations.removeAll();
        jPConcentrations.add(chpan);
        jPConcentrations.repaint();

        tracechart = ChartFactory.createXYLineChart(
                "Spectra",
                "Wavelength (nm)",
                "Number of counts",
                specCollection,
                PlotOrientation.VERTICAL,
                false,
                false,
                false);
        tracechart.getXYPlot().getDomainAxis().setUpperBound(res.GetX2()[res.GetX2().length - 1]);
//        tracechart.getXYPlot().setDomainZeroBaselineVisible(true);
        chpan = new ChartPanel(tracechart);
        chpan.getChartRenderingInfo().setEntityCollection(null);
//        chpan.setSize(jPSpectras.getMaximumSize());
        jPSpectras.removeAll();
        jPSpectras.add(chpan);
        jPSpectras.repaint();
    }

    private void MakeTracesChart() {
        XYItemRenderer renderer1 = new StandardXYItemRenderer();
        NumberAxis rangeAxis1 = new NumberAxis("Number of counts");
        XYPlot subplot1 = new XYPlot(tracesTimeCollection, null, rangeAxis1, renderer1);
        subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);

        XYItemRenderer renderer2 = new StandardXYItemRenderer();
        NumberAxis rangeAxis2 = new NumberAxis("Resid");
        rangeAxis2.setAutoRangeIncludesZero(false);
        XYPlot subplot2 = new XYPlot(residualsTime, null, rangeAxis2, renderer2);
        subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);

        NumberAxis xAxis = new NumberAxis("Time (ns)");
        xAxis.setRange(res.GetX()[0], res.GetX()[res.GetX().length - 1]);
        CombinedDomainXYPlot plot = new CombinedDomainXYPlot(xAxis);
        plot.setGap(10.0);
        plot.add(subplot1, 3);
        plot.add(subplot2, 1);
        plot.setOrientation(PlotOrientation.VERTICAL);
        JFreeChart tracechart = new JFreeChart("Selected trace", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
        ChartPanel chpanSelectedTrace = new ChartPanel(tracechart);
        chpanSelectedTrace.setSize(jPSelectedTimeTrace.getMaximumSize());
        jPSelectedTimeTrace.removeAll();
        jPSelectedTimeTrace.add(chpanSelectedTrace);
        jPSelectedTimeTrace.repaint();

// plot spectra
        subplot1 = new XYPlot(tracesWaveCollection, null, rangeAxis1, renderer1);
        subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
        subplot2 = new XYPlot(residualsWave, null, rangeAxis2, renderer2);
        subplot2.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);
        xAxis = new NumberAxis("Wavelength (nm)");
        xAxis.setRange(res.GetX2()[0], res.GetX2()[res.GetX2().length - 1]);
        plot = new CombinedDomainXYPlot(xAxis);
        plot.setGap(10.0);
        plot.add(subplot1, 3);
        plot.add(subplot2, 1);
        plot.setOrientation(PlotOrientation.VERTICAL);
        tracechart = new JFreeChart("Selected Spectrum", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
        chpanSelectedTrace = new ChartPanel(tracechart);
        chpanSelectedTrace.setSize(jPSelectedWaveTrace.getMaximumSize());
        jPSelectedWaveTrace.removeAll();
        jPSelectedWaveTrace.add(chpanSelectedTrace);
        jPSelectedWaveTrace.repaint();

    }

    private ColorCodedImageDataset MakeXYZDataset() {
//        DefaultXYZDataset dataset2 = new DefaultXYZDataset();
//        double[] xValues = new double[res.GetX().length * res.GetX2().length];
//        double[] yValues = new double[res.GetX().length * res.GetX2().length];
//
//        for (int i = 0; i < res.GetX().length; i++) {
//            for (int j = 0; j < res.GetX2().length; j++) {
//                xValues[j * res.GetX().length + i] = res.GetX2()[j];
//                yValues[j * res.GetX().length + i] = res.GetX()[i];
//            }
//        }
//        double[][] chartdata = {xValues, yValues, res.GetTraces().getColumnPackedCopy()};
//        dataset2.addSeries("Streak image", chartdata);

        dataset = new ColorCodedImageDataset(res.GetX2().length,res.GetX().length,
                    res.GetTraces().getRowPackedCopy(),res.GetX2(),res.GetX(),false);
        return dataset;
    }

        private JFreeChart createChart(XYDataset dataset1) {
        JFreeChart chart_temp = ChartFactory.createScatterPlot(null,
                null, null, dataset1, PlotOrientation.VERTICAL, false, false,
                false);

        PaintScale ps = new RainbowPaintScale(res.GetMinInt(), res.GetMaxInt());
        BufferedImage image = ImageUtilities.createColorCodedImage(this.dataset, ps);

        XYDataImageAnnotation ann = new XYDataImageAnnotation(image, 0,0,
                dataset.GetImageWidth(), dataset.GetImageHeigth(), true);
        XYPlot plot = (XYPlot) chart_temp.getPlot();
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        plot.getRenderer().addAnnotation(ann, Layer.BACKGROUND);
        NumberAxis xAxis = (NumberAxis) plot.getDomainAxis();
        xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        xAxis.setLowerMargin(0.0);
        xAxis.setUpperMargin(0.0);
        xAxis.setVisible(false);
        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        yAxis.setLowerMargin(0.0);
        yAxis.setUpperMargin(0.0);
        yAxis.setVisible(false);
        return chart_temp;
    }

    private void MakeImageChart(){
        dataset = new ColorCodedImageDataset(res.GetX2().length,res.GetX().length,
            res.GetTraces().getRowPackedCopy(),res.GetX2(),res.GetX(),false);
        PaintScale ps = new RainbowPaintScale(res.GetMinInt(), res.GetMaxInt());
        this.chartMain = createChart(new XYSeriesCollection());
//        this.chartMain.addChangeListener(this);
        XYPlot tempPlot = (XYPlot)this.chartMain.getPlot();
        this.wholeXRange = tempPlot.getDomainAxis().getRange();
        this.wholeYRange = tempPlot.getRangeAxis().getRange();
        chpanImage = new ChartPanel(chartMain);
        chpanImage.setFillZoomRectangle(true);
        chpanImage.setMouseWheelEnabled(true);
        jPSpecImage.add(chpanImage);
        jPSpecImage.repaint();

        ImageCrosshairLabelGenerator crossLabGen1 = new ImageCrosshairLabelGenerator(res.GetX2(),false);
        ImageCrosshairLabelGenerator crossLabGen2 = new ImageCrosshairLabelGenerator(res.GetX(),true);

        CrosshairOverlay overlay = new CrosshairOverlay();
        crosshair1 = new Crosshair(0.0);
        crosshair1.setPaint(Color.red);
        crosshair2 = new Crosshair(0.0);
        crosshair2.setPaint(Color.GRAY);

        overlay.addDomainCrosshair(crosshair1);
        overlay.addRangeCrosshair(crosshair2);

        chpanImage.addOverlay(overlay);
        crosshair1.setLabelGenerator(crossLabGen1);
        crosshair1.setLabelVisible(true);
        crosshair1.setLabelAnchor(RectangleAnchor.BOTTOM_RIGHT);
        crosshair1.setLabelBackgroundPaint(new Color(255, 255, 0, 100));
        crosshair2.setLabelAnchor(RectangleAnchor.BOTTOM_RIGHT);
        crosshair2.setLabelGenerator(crossLabGen2);
        crosshair2.setLabelVisible(true);
        crosshair2.setLabelBackgroundPaint(new Color(255, 255, 0, 100));

    }

//    private JFreeChart MakeImageChart(ColorCodedImageDataset dataset) {
//
//        chart = ChartFactory.createScatterPlot(null,
//                null, null, dataset, PlotOrientation.VERTICAL, false, false,
//                false);
//
//        PaintScale scale = new RainbowPaintScale(res.GetMinInt(), res.GetMaxInt(), true, false);
//        BufferedImage image = ImageUtilities.createColorCodedImage(dataset, scale);
//        XYDataImageAnnotation ann = new XYDataImageAnnotation(image, 0,0,
//                dataset.GetImageWidth(), dataset.GetImageHeigth(), true);
//        XYPlot plot = (XYPlot) chart.getPlot();
//        plot.setDomainPannable(true);
//        plot.setRangePannable(true);
//        plot.getRenderer().addAnnotation(ann, Layer.BACKGROUND);
//
//        NumberAxis xAxis = (NumberAxis) plot.getDomainAxis();
//        xAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
//        xAxis.setLowerMargin(0.0);
//        xAxis.setUpperMargin(0.0);
//        xAxis.setVisible(false);
//        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
//        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
//        yAxis.setLowerMargin(0.0);
//        yAxis.setUpperMargin(0.0);
//        yAxis.setVisible(false);


//        PaintScale ps = new RainbowPaintScale(res.GetMinInt(), res.GetMaxInt(), true, false);
//        chart.addChangeListener(this);

//        XYPlot tempPlot = chart.getXYPlot();
//        this.wholeXRange = tempPlot.getDomainAxis().getRange();
//        this.wholeYRange = tempPlot.getRangeAxis().getRange();
//        chpanImage = new ChartPanel(chart);
//        chpanImage.setFillZoomRectangle(true);
//        chpanImage.setMouseWheelEnabled(true);
////        jPSpecImage.removeAll();
////        chpanImage.setSize(jPSpecImage.getMaximumSize());
//        jPSpecImage.add(chpanImage);
//        jPSpecImage.repaint();
//
////        ImageCrosshairLabelGenerator crossLabGen1 = new ImageCrosshairLabelGenerator(res.GetX2(),false);
////        ImageCrosshairLabelGenerator crossLabGen2 = new ImageCrosshairLabelGenerator(res.GetX(),true);
//
//        CrosshairOverlay overlay = new CrosshairOverlay();
//        crosshair1 = new Crosshair(0.0);
//        crosshair1.setPaint(Color.RED);
//        crosshair2 = new Crosshair(0.0);
//        crosshair2.setPaint(Color.YELLOW);
//
//        overlay.addDomainCrosshair(crosshair1);
//        overlay.addRangeCrosshair(crosshair2);
//
//        chpanImage.addOverlay(overlay);
////        crosshair1.setLabelGenerator(crossLabGen1);
//        crosshair1.setLabelVisible(true);
//        crosshair1.setLabelAnchor(RectangleAnchor.BOTTOM_RIGHT);
//        crosshair1.setLabelBackgroundPaint(new Color(255, 255, 0, 100));
//        crosshair2.setLabelAnchor(RectangleAnchor.BOTTOM_RIGHT);
////        crosshair2.setLabelGenerator(crossLabGen2);
//        crosshair2.setLabelVisible(true);
//        crosshair2.setLabelBackgroundPaint(new Color(255, 255, 0, 100));
//
//
//
 
//        NumberAxis xAxis = new NumberAxis("Wavelengts (nm)");
//        xAxis.setLowerMargin(0.0);
//        xAxis.setUpperMargin(0.0);
//     //   xAxis.setRange(res.GetX2()[0],res.GetX2()[res.GetX2().length-1]);
//        xAxis.setVisible(false);
//        NumberAxis yAxis = new NumberAxis("Time (ps)");
//        yAxis.setAutoRangeIncludesZero(false);
//        yAxis.setInverted(true);
//        yAxis.setLowerMargin(0.0);
//        yAxis.setUpperMargin(0.0);
//     //   yAxis.setRange(res.GetX()[0],res.GetX()[res.GetX().length-1]);
//        yAxis.setVisible(false);

//        XYBlockRenderer renderer = new XYBlockRenderer();
//        PaintScale scale = new RainbowPaintScale(res.GetMinInt(), res.GetMaxInt(), true, false);
//        renderer.setPaintScale(scale);
//        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);

//        plot.setDomainCrosshairVisible(true);
//        plot.setDomainCrosshairLockedOnData(false);
//        plot.setRangeCrosshairVisible(true);
//        plot.setRangeCrosshairLockedOnData(false);
//
//        chart = new JFreeChart(plot);
//        chart.setNotify(false);
//        chart.removeLegend();
//
//        NumberAxis scaleAxis = new NumberAxis();
//        scaleAxis.setAxisLinePaint(Color.black);
//        scaleAxis.setTickMarkPaint(Color.black);
//        scaleAxis.setRange(res.GetMinInt(), res.GetMaxInt());
//        scaleAxis.setTickLabelFont(new Font("Dialog", Font.PLAIN, 9));
//        PaintScaleLegend legend = new PaintScaleLegend(scale, scaleAxis);
//        legend.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);
////        legend.setAxisOffset(5.0);
//        legend.setMargin(new RectangleInsets(5, 5, 5, 5));
////        legend.setFrame(new BlockBorder(Color.red));
////        legend.setPadding(new RectangleInsets(5, 5, 5, 5));
//        legend.setStripWidth(15);
//        legend.setPosition(RectangleEdge.RIGHT);
//        legend.setBackgroundPaint(chart.getBackgroundPaint());
//        chart.addSubtitle(legend);
//        chart.setNotify(true);
//        return chart;
//    }

    public void chartMouseClicked(ChartMouseEvent event) {
//        this.chart.setNotify(false);
//        int mouseX = event.getTrigger().getX();
//        int mouseY = event.getTrigger().getY();
//        Point2D p = this.chpanImage.translateScreenToJava2D(new Point(mouseX, mouseY));
//        XYPlot plot = (XYPlot) this.chart.getPlot();
//        ChartRenderingInfo info = this.chpanImage.getChartRenderingInfo();
//        Rectangle2D dataArea = info.getPlotInfo().getDataArea();
//
//        ValueAxis domainAxis = plot.getDomainAxis();
//        RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
//        ValueAxis rangeAxis = plot.getRangeAxis();
//        RectangleEdge rangeAxisEdge = plot.getRangeAxisEdge();
//
//        int chartX = (int) (domainAxis.java2DToValue(p.getX(), dataArea, domainAxisEdge));
//        int chartY = (int) (rangeAxis.java2DToValue(p.getY(), dataArea, rangeAxisEdge));
//
////        System.out.println(chartX+"    "+chartY);
//
//        UpdateSelectedTraces(chartY, chartX);
//        this.chart.setNotify(true);

    }

    public void chartMouseMoved(ChartMouseEvent event) {
//         System.out.println("ChartMouseMoved");
    }
    
        
}
