/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.timpgui.gui.scheme;

import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.JToolBar;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.timpgui.projectmanagement.DatasetNodeContainer;
import org.timpgui.projectmanagement.DatasetView;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
public final class DatasetsListView extends TopComponent implements ExplorerManager.Provider {

    private static DatasetsListView instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "DatasetsListView";

   private ExplorerManager manager   = new ExplorerManager();
   private DatasetView    datasetView  = new DatasetView();
   private DatasetNodeContainer   container = new DatasetNodeContainer();

    public DatasetsListView() {
        initComponents();
        
        //setName(NbBundle.getMessage(DatasetsListView.class, "CTL_DatasetsListViewTopComponent"));
        //setToolTipText(NbBundle.getMessage(DatasetsListView.class, "HINT_DatasetsListViewTopComponent"));
        manager.setRootContext(new AbstractNode(container,ExplorerUtils.createLookup(manager, getActionMap())));
        //setIcon(Utilities.loadImage(ICON_PATH, true));
        //manager.setRootContext(new AbstractNode(container,ExplorerUtils.createLookup(manager, getActionMap())) );
        //associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        rename = new javax.swing.JButton();
        panel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.border.title"))); // NOI18N
        setDisplayName(org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.displayName")); // NOI18N
        setFocusable(true);
        setMaximumSize(new java.awt.Dimension(200, 200));
        setMinimumSize(new java.awt.Dimension(200, 200));
        setName("null"); // NOI18N
        setPreferredSize(new java.awt.Dimension(200, 200));

        toolbar.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(add, org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.add.text")); // NOI18N
        add.setToolTipText(org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.add.toolTipText")); // NOI18N
        add.setFocusable(false);
        add.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        toolbar.add(add);

        org.openide.awt.Mnemonics.setLocalizedText(remove, org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.remove.text")); // NOI18N
        remove.setToolTipText(org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.remove.toolTipText")); // NOI18N
        remove.setFocusable(false);
        remove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        remove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });
        toolbar.add(remove);

        org.openide.awt.Mnemonics.setLocalizedText(rename, org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.rename.text")); // NOI18N
        rename.setToolTipText(org.openide.util.NbBundle.getMessage(DatasetsListView.class, "DatasetsListView.rename.toolTipText")); // NOI18N
        rename.setFocusable(false);
        rename.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rename.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameActionPerformed(evt);
            }
        });
        toolbar.add(rename);

        panel.setMaximumSize(new java.awt.Dimension(190, 140));
        panel.setMinimumSize(new java.awt.Dimension(190, 140));
        panel.setPreferredSize(new java.awt.Dimension(190, 140));
        panel.setLayout(new java.awt.BorderLayout());
        panel.add(datasetView, BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed

}//GEN-LAST:event_addActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        container.remove(manager.getSelectedNodes());
}//GEN-LAST:event_removeActionPerformed

    private void renameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameActionPerformed

}//GEN-LAST:event_renameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JPanel panel;
    private javax.swing.JButton remove;
    private javax.swing.JButton rename;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized DatasetsListView getDefault() {
        if (instance == null) {
            instance = new DatasetsListView();
        }
        return instance;
    }

    /**
     * Obtain the SelectedDatasetsViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DatasetsListView findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DatasetsListView.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DatasetsListView) {
            return (DatasetsListView) win;
        }
        Logger.getLogger(DatasetsListView.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return DatasetsListView.getDefault();
        }
    }
}
