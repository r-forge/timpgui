/*
 * TIMPGUIFrame.java
 *
 * Created on April 5, 2007, 3:45 PM
 */
package timpgui;

import java.io.*;
import java.util.*;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.Dimension;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;


import org.jfree.chart.ChartPanel;

import org.rosuda.JRI.RMainLoopCallbacks;
import org.rosuda.JRI.Rengine;

import timpgui.TIMPGUI;
import timpgui.TPlots;

/**
 * The TIMPGUIFrame class is the graphical user interface of TIMPGUI. This class provides the functionality to interact with the R package "TIMP" in an easy and user friendly way.
 *
 *
 * @author Joris Snellenburg
 * @version 0.1a, September 2007
 */
public class TIMPGUIFrame extends javax.swing.JFrame implements RMainLoopCallbacks {

    private Vector<String> dataPathVector = new Vector<String>();
    private Vector<String> modelNameVector = new Vector<String>();
    private DefaultListModel dataNameListModel = new DefaultListModel();
    private DefaultListModel modelViewListModel = new DefaultListModel();
    private DefaultListModel modelEditListModel = new DefaultListModel();
    private TCommands.readData readData = new TCommands.readData();
    private TCommands.preProcess preProcess = new TCommands.preProcess();
    private TCommands.initModel initModel = new TCommands.initModel();
    private TCommands.fitModel fitModel = new TCommands.fitModel();
    private TCommands.examineFit examineFit = new TCommands.examineFit();
    private String wspace = null;
    private int currentHistPosition = 0;
    private final StringBuffer console = new StringBuffer();
    private boolean wasHistEvent = false;
    /** Position where the R splash ends (need for clearing the console */
    public int end = 0;
    private Integer clearpoint = null;
    private JFileChooser chooser = null;
    private Document inputDoc = null;
    private Document outputDoc = null;
    private JPanel displayPanel;
    private JPanel chartContainer;

    /**
     * Initializes TIMPGUIFrame. Any custom initialization code can be added to this method.
     */
    public TIMPGUIFrame() {
        initComponents();
        Document inputDoc = input.getDocument();
        Document outputDoc = output.getDocument();
        TSettings.workingDirectory = System.getProperty("user.home");
        // Add History if we didn't found one in the user's home directory
        if (TIMPGUI.RHISTORY == null) {
            TIMPGUI.RHISTORY = new Vector();
        }
        currentHistPosition = TIMPGUI.RHISTORY.size();

        // Here you can add any custom initialization code.
        dataNameListModel.addListDataListener(new MyListDataListener());
        input.addKeyListener(new MyKeyListener());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        input = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        addDataFile = new javax.swing.JButton();
        removeDataFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        copyButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dataList1 = new javax.swing.JList();
        jPanel10 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jList3 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenProjectFileMenu = new javax.swing.JMenuItem();
        SaveProjectFileMenu = new javax.swing.JMenuItem();
        CloseProjectFileMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        ExitFileMenu = new javax.swing.JMenuItem();
        ImportMenu = new javax.swing.JMenu();
        DataImportMenu = new javax.swing.JMenuItem();
        ModelMenu = new javax.swing.JMenu();
        OpenModelMenu = new javax.swing.JMenuItem();
        SaveModelMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        NewModelMenu = new javax.swing.JMenuItem();
        PlotMenu = new javax.swing.JMenu();
        testChart1 = new javax.swing.JMenuItem();
        testChart2 = new javax.swing.JMenuItem();
        testChart3 = new javax.swing.JMenuItem();
        testChart4 = new javax.swing.JMenuItem();
        testChart5 = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        AboutHelpMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("parentFrame"); // NOI18N
        setResizable(false);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(1024, 768));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(800, 600));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1024, 768));

        input.setText("R input command line");
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputKeyReleased(evt);
            }
        });

        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, input, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(input, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Console", jPanel1);

        addDataFile.setText("Add Data File");
        addDataFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataFileActionPerformed(evt);
            }
        });

        removeDataFile.setText("Remove Data File");
        removeDataFile.setEnabled(false);
        removeDataFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDataFileActionPerformed(evt);
            }
        });

        dataList.setModel(dataNameListModel);
        dataList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dataListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(dataList);

        jList2.setModel(modelViewListModel);
        jScrollPane3.setViewportView(jList2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(3);
        jScrollPane5.setViewportView(jTextArea1);

        copyButton.setText("Copy");

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Link to Model(s)");

        jButton8.setText("Remove from Model(s)");
        jButton8.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(addDataFile)
                            .add(removeDataFile))
                        .add(23, 23, 23)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton8)
                            .add(jButton7)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 552, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(copyButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(executeButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(324, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jPanel2Layout.createSequentialGroup()
                            .add(addDataFile)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(removeDataFile))
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                        .add(jScrollPane3))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jButton7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton8)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 452, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(copyButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(executeButton)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("readData", jPanel2);

        jPanel3.setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel9.setMinimumSize(new java.awt.Dimension(480, 360));
        jPanel9.setPreferredSize(new java.awt.Dimension(492, 389));
        jPanel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel9MouseClicked(evt);
            }
        });

        jLabel1.setText("3D Preview. Please select a TIMP dataset to visualize.");
        jPanel9.add(jLabel1);

        dataList1.setModel(dataNameListModel);
        dataList1.setMaximumSize(new java.awt.Dimension(20, 20));
        dataList1.setMinimumSize(new java.awt.Dimension(20, 20));
        dataList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataList1MouseClicked(evt);
            }
        });
        dataList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dataList1ValueChanged(evt);
            }
        });
        dataList1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataList1PropertyChange(evt);
            }
        });
        dataList1.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                dataList1VetoableChange(evt);
            }
        });

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel10.setMinimumSize(new java.awt.Dimension(480, 360));
        jPanel10.setPreferredSize(new java.awt.Dimension(492, 389));
        jPanel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel10MouseClicked(evt);
            }
        });

        jLabel2.setText("Slice selection. Please select a TIMP dataset to visualize.");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel10.add(jLabel2);

        jLabel3.setLabelFor(dataList1);
        jLabel3.setText("Available datasets");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 11, Short.MAX_VALUE)
                        .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(dataList1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 82, Short.MAX_VALUE)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(dataList1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 218, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("preProcess", jPanel3);

        jList3.setModel(modelEditListModel);

        jButton3.setText("Add Model");

        jButton4.setText("Remove Model");

        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton2)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 52, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jList3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                        .add(jButton3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton4)))
                .add(310, 310, 310))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(95, 95, 95)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton3)
                            .add(jButton4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jList3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)))
                .add(353, 353, 353))
        );

        jTabbedPane1.addTab("initModel", jPanel4);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1019, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 738, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("fitModel", jPanel5);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1019, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 738, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("examineFit", jPanel6);

        FileMenu.setText("File");

        OpenProjectFileMenu.setText("Open Project");
        FileMenu.add(OpenProjectFileMenu);

        SaveProjectFileMenu.setText("Save Project");
        FileMenu.add(SaveProjectFileMenu);

        CloseProjectFileMenu.setText("Close Project");
        FileMenu.add(CloseProjectFileMenu);
        FileMenu.add(jSeparator1);

        ExitFileMenu.setText("Exit");
        ExitFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitFileMenuActionPerformed(evt);
            }
        });
        FileMenu.add(ExitFileMenu);

        jMenuBar1.add(FileMenu);

        ImportMenu.setText("Import");

        DataImportMenu.setText("Time explicit dataset");
        DataImportMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataImportMenuActionPerformed(evt);
            }
        });
        ImportMenu.add(DataImportMenu);

        jMenuBar1.add(ImportMenu);

        ModelMenu.setText("Model");

        OpenModelMenu.setText("Import");
        ModelMenu.add(OpenModelMenu);

        SaveModelMenu.setText("Export");
        ModelMenu.add(SaveModelMenu);
        ModelMenu.add(jSeparator2);

        NewModelMenu.setText("New");
        ModelMenu.add(NewModelMenu);

        jMenuBar1.add(ModelMenu);

        PlotMenu.setText("Plot");

        testChart1.setText("testChart1");
        testChart1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testChart1ActionPerformed(evt);
            }
        });
        PlotMenu.add(testChart1);

        testChart2.setText("testChart2");
        testChart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testChart2ActionPerformed(evt);
            }
        });
        PlotMenu.add(testChart2);

        testChart3.setText("testChart3");
        testChart3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testChart3ActionPerformed(evt);
            }
        });
        PlotMenu.add(testChart3);

        testChart4.setText("Item");
        testChart4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testChart4ActionPerformed(evt);
            }
        });
        PlotMenu.add(testChart4);

        testChart5.setText("Item");
        testChart5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testChart5ActionPerformed(evt);
            }
        });
        PlotMenu.add(testChart5);

        jMenuBar1.add(PlotMenu);

        HelpMenu.setText("Help");

        AboutHelpMenu.setText("About");
        HelpMenu.add(AboutHelpMenu);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleParent(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void testChart4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testChart4ActionPerformed
// TODO add your handling code here:
//        jPanel10.removeAll();
//        //ChartPanel p = (ChartPanel) Custom3DLinePlot.createDemoPanel();
//        JPanel p = Custom3DLinePlot.createDemoPanel();
//        p.setPreferredSize(new Dimension(480, 360));
//        jPanel10.add(p);
//        jPanel10.repaint();

        // TODO add your handling code here:
        // Plot Concentrations
        jPanel9.removeAll();
        //int index = dataList1.getSelectedIndex();
        String name = "denRes";
        //String name = dataNameListModel.getElementAt(index).toString();
        JPanel p = TPlots.outputGraphics4(name);
        p.setPreferredSize(new Dimension(480, 360));
        jPanel9.add(p);
        jPanel9.repaint();
    }//GEN-LAST:event_testChart4ActionPerformed

    private void dataList1VetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_dataList1VetoableChange
// TODO add your handling code here:
    }//GEN-LAST:event_dataList1VetoableChange

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jPanel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel10MouseClicked
// TODO add your handling code here:
    }//GEN-LAST:event_jPanel10MouseClicked

    private void dataList1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataList1PropertyChange
// TODO add your handling code here:
        
    }//GEN-LAST:event_dataList1PropertyChange

    private void dataList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataList1MouseClicked
// TODO add your handling code here:
        
    }//GEN-LAST:event_dataList1MouseClicked

    private void jPanel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel9MouseClicked
// TODO add your handling code here:
        
    }//GEN-LAST:event_jPanel9MouseClicked

    private void testChart3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testChart3ActionPerformed
// TODO add your handling code here:
        jPanel10.removeAll();
        int index = dataList1.getSelectedIndex();
        String name = dataNameListModel.getElementAt(index).toString();
        JPanel p = TPlots.outputGraphics4(name);
        p.setPreferredSize(new Dimension(480, 360));
        jPanel10.add(p);
        jPanel10.repaint();
    }//GEN-LAST:event_testChart3ActionPerformed

    private void testChart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testChart2ActionPerformed
// TODO add your handling code here:
        jPanel10.removeAll();
        ChartPanel p = (ChartPanel) XYStepRendererDemo2.createDemoPanel();
        p.setPreferredSize(new Dimension(480, 360));
        jPanel10.add(p);
        jPanel10.repaint();
        
    }//GEN-LAST:event_testChart2ActionPerformed

    private void inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyReleased
// TODO add your handling code here:
        // System.out.println("inputKeyReleased");
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (evt.isControlDown() || evt.isMetaDown()) {
                try {
                    inputDoc.insertString(input.getCaretPosition(), "\n",
                            null);
                } catch (Exception e) {
                }
            } else {
                String cmd = input.getText().trim();
                input.setText("");
                input.setCaretPosition(0);
                input.requestFocus();
                execute(cmd, true);
            }
        }
        if (evt.getSource().equals(output) && evt.getKeyCode() == KeyEvent.VK_V && (evt.isControlDown() || evt.isMetaDown())) {
            input.requestFocus();
            input.paste();
            input.setCaretPosition(input.getText().length());
        } else if ((evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) && wasHistEvent) {
            wasHistEvent = false;
            input.setCaretPosition(input.getText().length());
        }
    }//GEN-LAST:event_inputKeyReleased

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
// TODO add your handling code here:
        
    }//GEN-LAST:event_jButton22ActionPerformed

    private void dataList4ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList4ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList4ComponentAdded

    private void dataList4ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList4ValueChanged
// TODO add your handling code here:
    }//GEN-LAST:event_dataList4ValueChanged

    private void removeDataFile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataFile4ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_removeDataFile4ActionPerformed

    private void addDataFile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataFile4ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addDataFile4ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    private void dataList3ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList3ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList3ComponentAdded

    private void dataList3ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList3ValueChanged
// TODO add your handling code here:
    }//GEN-LAST:event_dataList3ValueChanged

    private void removeDataFile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataFile3ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_removeDataFile3ActionPerformed

    private void addDataFile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataFile3ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addDataFile3ActionPerformed

    private void initModelExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initModelExecuteActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_initModelExecuteActionPerformed

    private void dataList2ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList2ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList2ComponentAdded

    private void dataList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList2ValueChanged
// TODO add your handling code here:
    }//GEN-LAST:event_dataList2ValueChanged

    private void removeModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeModelActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_removeModelActionPerformed

    private void addModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addModelActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addModelActionPerformed

    private void dataList1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList1ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList1ComponentAdded

    private void dataList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList1ValueChanged
// TODO add your handling code here:
        if (evt.getValueIsAdjusting() == false) {
            int index = dataList1.getSelectedIndex();
            if (index == -1) {
                //
                jLabel1.setVisible(true);
                jLabel2.setVisible(true);

            } else {
                //
                jLabel1.setVisible(false);
                jLabel2.setVisible(false);
                updatePreviewPanels();
            }
        }
    }//GEN-LAST:event_dataList1ValueChanged

    private void TabsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TabsFocusGained
// TODO add your handling code here:
        input.selectAll();
        input.requestFocus();
    }//GEN-LAST:event_TabsFocusGained

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
// TODO add your handling code here:
        // Get paragraph element
        Element paragraph = jTextArea1.getDocument().getDefaultRootElement();

        // Get number of content elements
        int contentCount = paragraph.getElementCount();
        String[] code = new String[contentCount];

        // Get index ranges for each content element.
        // Each content element represents one line.
        // Each line includes the terminating newline.
        for (int i = 0; i < contentCount; i++) {
            Element e = paragraph.getElement(i);
            int rangeStart = e.getStartOffset();
            int rangeEnd = e.getEndOffset();
            try {
                String line = jTextArea1.getText(rangeStart, rangeEnd - rangeStart);
                code[i] = line;
                execute(line, true);

            } catch (BadLocationException ex) {

            }
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void dataListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataListValueChanged
// TODO add your handling code here:
        if (evt.getValueIsAdjusting() == false) {

            if (dataList.getSelectedIndex() == -1) {
                //No selection, disable fire button.
                removeDataFile.setEnabled(false);

            } else {
                //Selection, enable the fire button.
                removeDataFile.setEnabled(true);
            }
        }
    }//GEN-LAST:event_dataListValueChanged

    private void removeDataFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataFileActionPerformed
// TODO add your handling code here:
        int index = dataList.getSelectedIndex();
        dataNameListModel.remove(index);

        int size = dataNameListModel.getSize();

        if (size == 0) { //Nobody's left, disable firing.
            removeDataFile.setEnabled(false);

        } else { //Select an index.
            if (index == dataNameListModel.getSize()) {
                //removed item in last position
                index--;
            }

            dataList.setSelectedIndex(index);
            dataList.ensureIndexIsVisible(index);
        }


//     int selectedElement = dataList.getSelectedIndex();
//
//     dataNameListModel.removeElementAt(selectedElement);
//     dataPathVector.removeElementAt(selectedElement);
//     dataList.validate();
//     jScrollPane2.revalidate();
//     jScrollPane2.repaint();
        
    }//GEN-LAST:event_removeDataFileActionPerformed

    private void addDataFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataFileActionPerformed
        String filename = "*.txt";
        String name = null;

        // Create a file chooser
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.setSelectedFile(new File(filename));
        int result = chooser.showOpenDialog(this); //OK or cancel
        if (result == JFileChooser.APPROVE_OPTION) {
            name = chooser.getSelectedFile().getName().substring(0, chooser.getSelectedFile().getName().lastIndexOf("."));
        } else {
            System.out.println("Open File Dialog was cancelled.");
        }
        if (name != null) {
            int index = dataList.getSelectedIndex(); //get selected index
            if (index == -1) { //no selection, so insert at beginning
                index = 0;
            } else {           //add after the selected item
                index++;
            }
            dataPathVector.insertElementAt(chooser.getSelectedFile().getAbsolutePath().toString().replaceAll("\\\\", "\\\\\\\\"), index);
            dataNameListModel.insertElementAt(name, index);

            //Select the new item and make it visible.
            dataList.setSelectedIndex(index);
            dataList.ensureIndexIsVisible(index);

            //Execute the dataset
            Element paragraph = jTextArea1.getDocument().getDefaultRootElement();
            Element e = paragraph.getElement(index);
            int rangeStart = e.getStartOffset();
            int rangeEnd = e.getEndOffset();
            try {
                String line = jTextArea1.getText(rangeStart, rangeEnd - rangeStart);
                execute(line, true);

            } catch (BadLocationException ex) {

            }

        }
//            dataNameListModel.addElement(stringValue);
//
//            // dataNameListModel.addElement(dataPathVector.lastElement().toString()); // for testing
//            jScrollPane2.revalidate();
//            jScrollPane2.repaint();
        
    }//GEN-LAST:event_addDataFileActionPerformed

    private void testChart1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testChart1ActionPerformed
// TODO add your handling code here:
        TPlots.outputGraphics();
    }//GEN-LAST:event_testChart1ActionPerformed

    private void ExitFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitFileMenuActionPerformed
// TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitFileMenuActionPerformed

    private void DataImportMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataImportMenuActionPerformed
// TODO add your handling code here:
        //for a default JFileChooser using the default directory
        JFileChooser fc = new JFileChooser();
        int option = fc.showOpenDialog(this);
        //where the 'parentComponent' is normally
        //a JFrame or a JDialog.
        if (option == JFileChooser.APPROVE_OPTION) {
        // dataSourceField.setText(reportFile.getAbsolutePath());  // show it on GUI
        } else {
            System.out.println("error");
        }
        
    }//GEN-LAST:event_DataImportMenuActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
    // TODO add your handling code here:
    }//GEN-LAST:event_inputActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        // Get paragraph element
        Element paragraph = jTextArea2.getDocument().getDefaultRootElement();

        // Get number of content elements
        int contentCount = paragraph.getElementCount();
        String[] code = new String[contentCount];

        // Get index ranges for each content element.
        // Each content element represents one line.
        // Each line includes the terminating newline.
        for (int i = 0; i < contentCount; i++) {
            Element e = paragraph.getElement(i);
            int rangeStart = e.getStartOffset();
            int rangeEnd = e.getEndOffset();
            try {
                String line = jTextArea2.getText(rangeStart, rangeEnd - rangeStart);
                code[i] = line;
                execute(line, true);

            } catch (BadLocationException ex) {

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void testChart5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testChart5ActionPerformed
        // TODO add your handling code here:
        // Plot Concentrations
        jPanel10.removeAll();
        //int index = dataList1.getSelectedIndex();
        String name = "denRes";
        //String name = dataNameListModel.getElementAt(index).toString();
        JPanel p = TPlots.outputGraphics5(name);
        p.setPreferredSize(new Dimension(480, 360));
        jPanel10.add(p);
        jPanel10.repaint();
        
    }//GEN-LAST:event_testChart5ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutHelpMenu;
    private javax.swing.JMenuItem CloseProjectFileMenu;
    private javax.swing.JMenuItem DataImportMenu;
    private javax.swing.JMenuItem ExitFileMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenu ImportMenu;
    private javax.swing.JMenu ModelMenu;
    private javax.swing.JMenuItem NewModelMenu;
    private javax.swing.JMenuItem OpenModelMenu;
    private javax.swing.JMenuItem OpenProjectFileMenu;
    private javax.swing.JMenu PlotMenu;
    private javax.swing.JMenuItem SaveModelMenu;
    private javax.swing.JMenuItem SaveProjectFileMenu;
    private javax.swing.JButton addDataFile;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton copyButton;
    private javax.swing.JList dataList;
    private javax.swing.JList dataList1;
    private javax.swing.JButton executeButton;
    public javax.swing.JTextField input;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    public javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    public javax.swing.JTextArea output;
    private javax.swing.JButton removeDataFile;
    private javax.swing.JMenuItem testChart1;
    private javax.swing.JMenuItem testChart2;
    private javax.swing.JMenuItem testChart3;
    private javax.swing.JMenuItem testChart4;
    private javax.swing.JMenuItem testChart5;
    // End of variables declaration//GEN-END:variables
    private final static String newline = "\n";
    // dataNameListModel.addListDataListener(new MyListDataListener());
    class MyListDataListener implements ListDataListener {

        public void contentsChanged(ListDataEvent e) {
            jTextArea1.append("contentsChanged: " + e.getIndex0() +
                    ", " + e.getIndex1() + newline);
        }

        public void intervalAdded(ListDataEvent e) {
            System.out.print(dataNameListModel.indexOf(dataNameListModel.firstElement()));
            System.out.print(dataNameListModel.indexOf(dataNameListModel.lastElement()));

//        jTextArea1.append("intervalAdded: " + e.getIndex0() +
//	           ", " + e.getIndex1() + newline);
            jTextArea1.setText("");
            for (int i = dataNameListModel.indexOf(dataNameListModel.firstElement()); i < dataNameListModel.indexOf(dataNameListModel.lastElement()) + 1; i++) {
                readData.setArg("dat", dataNameListModel.getElementAt(i).toString());
                readData.setArg("filenm", dataPathVector.get(i).toString());
                readData.setArg("sep", "\"\"");
                jTextArea1.append(readData.generateCode());
            }
        }

        public void intervalRemoved(ListDataEvent e) {
//        jTextArea1.append("intervalRemoved: " + e.getIndex0() +
//	           ", " + e.getIndex1() + newline);
            jTextArea1.setText("");
            if (dataNameListModel.isEmpty() == false) {
                for (int i = dataNameListModel.indexOf(dataNameListModel.firstElement()); i < dataNameListModel.indexOf(dataNameListModel.lastElement()) + 1; i++) {
                    jTextArea1.append(dataNameListModel.getElementAt(i).toString());
                    jTextArea1.append(" <- readData(\"");
                    jTextArea1.append(dataPathVector.get(i).toString());
                    jTextArea1.append("\")\n");
                }
            }
        }
    }

    /**
     * Close Console, but not before we asked the user if he wants to save
     * opened Editors.
     */
    public void exit() {
        dispose();
    }

    /**
     * Close Console, but not before we asked the user if he wants to save
     * opened Editors.
     */
    @Override
    public void dispose() {
        execute("q()", false);
    }

    /**
     * Execute a command and add it into history.
     *
     * @param cmd
     *            command for execution
     * @param addToHist
     *            indicates wether the command should be added to history or not
     */
    public void execute(String cmd, boolean addToHist) {
        if (!TIMPGUI.STARTED) {
            return;
        }
        if (addToHist && TIMPGUI.RHISTORY.size() == 0) {
            TIMPGUI.RHISTORY.add(cmd);
        } else if (addToHist && cmd.trim().length() > 0 && TIMPGUI.RHISTORY.size() > 0 && !TIMPGUI.RHISTORY.lastElement().equals(cmd.trim())) {
            TIMPGUI.RHISTORY.add(cmd);
        }
        currentHistPosition = TIMPGUI.RHISTORY.size();

        String[] cmdArray = cmd.split("\n");

        String c = null;
        for (int i = 0; i < cmdArray.length; i++) {
            c = cmdArray[i];
            if (isHelpCMD(c)) {
                try {
                    outputDoc.insertString(outputDoc.getLength(), c + "\n" + TRController.getRPrompt(), null);
                } catch (Exception e) {
                }
            } else if (isSupported(c)) {
                TIMPGUI.rSync.triggerNotification(c.trim());
            }
        }
    }

    /**
     * Parse command if it is a helpcommand.
     *
     * @param cmd
     *            command which should be executed
     * @return true if help should be started, false if not
     */
    // later i hope it will be possible let R do this
    public boolean isHelpCMD(String cmd) {
        cmd = cmd.trim();
        if (cmd.startsWith("help(") || cmd.startsWith("?") || cmd.startsWith("help.start(") || cmd.startsWith("help.search(")) {
            // help(cmd);
            return true;
        }
        return false;
    }

    private boolean isSupported(String cmd) {
        cmd = cmd.trim();
        if (cmd.startsWith("fix(") || cmd.startsWith("edit(") || cmd.startsWith("edit.data.frame(")) {
            return false;
        }
        return true;
    }

    /**
     * Clear the console's content, if it's too full.
     */
    public void clearconsole() {
    // remove output
    }

    /**
     * Load a workspace, R-command: load(...).
     */
    public void loadWorkSpace() {
    // execute("load(\"" + wspace.replace('\\', '/') + "\")", false);
        
    }

    /**
     * Save workspace with specified filename, R-command: save.image(...).
     *
     * @param file
     *            filename
     */
    public void saveWorkSpace(String file) {
        if (file == null) {
            execute("save.image()", false);
        } else {
            execute("save.image(\"" + (file == null ? "" : file.replace('\\', '/')) + "\",compress=TRUE)", false);
        }
        TIMPGUI.writeHistory();
    }

    /**
     * Save workspace to a different file then .RData.
     */
    public void saveWorkSpaceAs() {
    //saveWorkSpace(file);
    //TIMPGUI.writeHistory();
    }

    /**
     * Get the font's width form current settings using {@see FontMetrics}.
     *
     * @return fontwidth
     */
    public int getFontWidth() {
        int width = output.getFontMetrics(output.getFont()).charWidth('M');
        width = output.getWidth() / width;
        return (int) (width) - (TSettings.isMac ? 0 : 1);
    }

    /**
     * Write output from R into console (old R callback).
     *
     * @param re
     *            used Rengine
     * @param text
     *            output
     * @param addToHist
     *            seems to be added in versions 1.5 (no documentation)
     */
    public void rWriteConsole(Rengine re, String text, int addToHist) {
        Document outputDoc = output.getDocument();
        console.append(text);
        if (console.length() > 100) {
            output.append(console.toString());
            console.delete(0, console.length());
            output.setCaretPosition(outputDoc.getLength());
        }
    }

    /**
     * Invoke the busy cursor (R callback).
     *
     * @param re
     *            used Rengine
     * @param which
     *            busy (1) or not (0)
     */
    public void rBusy(Rengine re, int which) {
        Document outputDoc = output.getDocument();
        if (which == 0) {
            if (output != null) {
                output.append(console.toString()); // color?
                console.delete(0, console.length());
            }
            output.setCaretPosition(outputDoc.getLength());
        } else {
            ;
        }
    }

    /**
     * Read the commands from input area (R callback).
     *
     * @param re
     *            used Rengine
     * @param prompt
     *            prompt from R
     * @param addToHistory
     *            is it an command which to add to the history
     */
    public String rReadConsole(Rengine re, String prompt, int addToHistory) {
        Document outputDoc = output.getDocument();
        if (prompt.indexOf("Save workspace") > -1) {
            String retVal = TIMPGUI.exit();
            if (wspace != null && retVal.indexOf('y') >= 0) {
                TIMPGUI.R.eval("save.image(\"" + wspace.replace('\\', '/') + "\")");
                return "n\n";
            } else {
                return retVal;
            }
        } else {
            output.append(prompt);
            output.setCaretPosition(outputDoc.getLength());
            String s = TIMPGUI.rSync.waitForNotification();
            try {
                outputDoc.insertString(outputDoc.getLength(), s + "\n", null);
            } catch (Exception e) {
            }
            return (s == null || s.length() == 0) ? "\n" : s + "\n";
        }
    }

    /**
     * Showing a message from the rengine (R callback).
     *
     * @param re
     *            used Rengine
     * @param message
     *            message from R
     */
    public void rShowMessage(Rengine re, String message) {
        JOptionPane.showMessageDialog(this, message, "R Message",
                JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Choose a file invoked be file.choose() (R callback).
     *
     * @param re
     *            used Rengine
     * @param newFile
     *            if it's a new file
     */
    public String rChooseFile(Rengine re, int newFile) {
        String res = null;
        String directory = TSettings.workingDirectory;
        if (directory != null) {
            JFileChooser chooser = new JFileChooser(directory);
        } else {
            JFileChooser chooser = new JFileChooser();

        }
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            res = chooser.getCurrentDirectory().getAbsolutePath() + File.separator;
        }
        return res;
    }

    /**
     * Flush the console (R callback). !! not implemented yet !!
     *
     * @param re
     *            used Rengine
     */
    public void rFlushConsole(Rengine re) {
    }

    /**
     * Load history from a file (R callback).
     *
     * @param re
     *            used Rengine
     * @param filename
     *            history file
     */
    public void rLoadHistory(Rengine re, String filename) {
        File hist = null;
        try {
            if ((hist = new File(filename)).exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(hist));
                if (TIMPGUI.RHISTORY == null) {
                    TIMPGUI.RHISTORY = new Vector();
                }
                while (reader.ready()) {
                    TIMPGUI.RHISTORY.add(reader.readLine() + "\n");
                }
                reader.close();
            }
        } catch (Exception e) {
        // new Error(e);
        }
    }

    /**
     * Save history to a file (R callback).
     *
     * @param re
     *            used Rengine
     * @param filename
     *            history file
     */
    public void rSaveHistory(Rengine re, String filename) {
        try {
            System.out.println("Save History");
            File hist = new File(filename);
            BufferedWriter writer = new BufferedWriter(new FileWriter(hist));
            Enumeration e = TIMPGUI.RHISTORY.elements();
            int i = 0;
            while (e.hasMoreElements()) {
                writer.write(e.nextElement().toString() + "#\n");
            }
            writer.flush();
            writer.close();
        } catch (Exception e) {
        // new ErrorMsg(e);
        }
    }

    private void updatePreviewPanels() {
        int index = dataList1.getSelectedIndex();
        String name = dataNameListModel.getElementAt(index).toString(); //toString might not be needed

        TPlots.plot3DPreview(name);
        TPlots.plot2DPreview(name);
    }

    // ======================================================= other events ===
    public class MyKeyListener implements KeyListener {

        public void keyPressed(KeyEvent ke) {
            if (ke.getSource().equals(output) && !ke.isMetaDown() && !ke.isControlDown() && !ke.isAltDown()) {
                input.requestFocus();
            }
            if (ke.getKeyCode() == KeyEvent.VK_UP) {
                if (currentHistPosition > 0) {
                    if (input.getCaretPosition() == 0 || input.getCaretPosition() == input.getText().length()) {
                        input.setText(TIMPGUI.RHISTORY.get(--currentHistPosition).toString());
                        input.setCaretPosition(input.getText().length());
                        wasHistEvent = true;
                    }
                }
            } else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {
                if (input.getCaretPosition() == 0 || input.getCaretPosition() == input.getText().length()) {
                    if (currentHistPosition < TIMPGUI.RHISTORY.size() - 1) {
                        input.setText(TIMPGUI.RHISTORY.get(++currentHistPosition).toString());
                        input.setCaretPosition(input.getText().length());
                    } else if (TIMPGUI.RHISTORY.size() > 0 && currentHistPosition < TIMPGUI.RHISTORY.size()) {
                        input.setText("");
                        currentHistPosition++;
                    }
                    wasHistEvent = true;
                }
            }
        }

        public void keyTyped(KeyEvent e) {
        }

        public void keyReleased(KeyEvent e) {
        }
    }
}
