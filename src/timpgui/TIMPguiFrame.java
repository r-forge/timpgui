/*
 * TIMPGUIFrame.java
 *
 * Created on April 5, 2007, 3:45 PM
 */

package timpgui;

import java.io.*;
import java.util.*;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.undo.CannotUndoException;

import org.rosuda.JRI.RMainLoopCallbacks;
import org.rosuda.JRI.Rengine;
import timpgui.TIMPGUI;
import timpgui.TPlots;


/**
 * The TIMPGUIFrame class is the graphical user interface of TIMPGUI. This class provides the functionality to interact with the R package "TIMP" in an easy and user friendly way.
 * 
 * 
 * @author Joris Snellenburg
 * @version 0.1, May 2007
 */
public class TIMPGUIFrame extends javax.swing.JFrame implements RMainLoopCallbacks {

    private	Vector<String>          dataPathVector = new Vector<String>();
    private	Vector<String>		modelNameVector = new Vector<String>();
    private DefaultListModel dataNameListModel = new DefaultListModel();
    private DefaultListModel modelViewListModel = new DefaultListModel();
    private DefaultListModel modelEditListModel = new DefaultListModel();
    private TCommands.readData readData = new TCommands.readData();
    private TCommands.preProcess preProcess = new TCommands.preProcess();
    private TCommands.initModel initModel = new TCommands.initModel();
    private TCommands.fitModel fitModel = new TCommands.fitModel();
    private TCommands.examineFit examineFit = new TCommands.examineFit();
    
    private String wspace = null;
    private int currentHistPosition = 0;
    private final StringBuffer console = new StringBuffer();
    private boolean wasHistEvent = false;
	/** Position where the R splash ends (need for clearing the console */
    public int end = 0;
    private Integer clearpoint = null;
    private JFileChooser chooser = null;
    private Document inputDoc = null;
    private Document outputDoc = null;
        
    /**
     * Initializes TIMPGUIFrame. Any custom initialization code can be added to this method.
     */
    public TIMPGUIFrame() {
        initComponents();
        Document inputDoc = input.getDocument();
        Document outputDoc = output.getDocument();
        JGRPrefs.workingDirectory = System.getProperty("user.home");
        // Add History if we didn't found one in the user's home directory
	if (TIMPGUI.RHISTORY == null)
		TIMPGUI.RHISTORY = new Vector();
	currentHistPosition = TIMPGUI.RHISTORY.size();

        // Here you can add any custom initialization code.
        dataNameListModel.addListDataListener(new MyListDataListener());
        input.addKeyListener(new MyKeyListener());

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        input = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        addDataFile = new javax.swing.JButton();
        removeDataFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jList3 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jPanel7 = new javax.swing.JPanel();
        jSlider2 = new javax.swing.JSlider();
        jLineChart1 = new org.jfree.beans.JLineChart();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenProjectFileMenu = new javax.swing.JMenuItem();
        SaveProjectFileMenu = new javax.swing.JMenuItem();
        CloseProjectFileMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        ExitFileMenu = new javax.swing.JMenuItem();
        ImportMenu = new javax.swing.JMenu();
        DataImportMenu = new javax.swing.JMenuItem();
        ModelMenu = new javax.swing.JMenu();
        OpenModelMenu = new javax.swing.JMenuItem();
        SaveModelMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        NewModelMenu = new javax.swing.JMenuItem();
        PlotMenu = new javax.swing.JMenu();
        PieChart = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        AboutHelpMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("parentFrame");
        setResizable(false);
        input.setText("R input command line");
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputKeyReleased(evt);
            }
        });

        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, input, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(input, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Console", jPanel1);

        addDataFile.setText("Add Data File");
        addDataFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataFileActionPerformed(evt);
            }
        });

        removeDataFile.setText("Remove Data File");
        removeDataFile.setEnabled(false);
        removeDataFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDataFileActionPerformed(evt);
            }
        });

        dataList.setModel(dataNameListModel);
        dataList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dataListFocusLost(evt);
            }
        });
        dataList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dataListValueChanged(evt);
            }
        });
        dataList.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                dataListComponentAdded(evt);
            }
        });

        jScrollPane2.setViewportView(dataList);

        jList2.setModel(modelViewListModel);
        jScrollPane3.setViewportView(jList2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(3);
        jScrollPane5.setViewportView(jTextArea1);

        jButton5.setText("Copy");

        jButton6.setText("Execute");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Link to Model(s)");

        jButton8.setText("Remove from Model(s)");
        jButton8.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 552, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jButton6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(addDataFile)
                            .add(removeDataFile))
                        .add(23, 23, 23)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton8)
                            .add(jButton7)))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jPanel2Layout.createSequentialGroup()
                            .add(addDataFile)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(removeDataFile))
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                        .add(jScrollPane3))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jButton7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton8)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 250, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jButton5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton6))
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("readData", jPanel2);

        jList3.setModel(modelEditListModel);

        jButton3.setText("Add Model");

        jButton4.setText("Remove Model");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jList3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                        .add(jButton3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton4)))
                .addContainerGap(518, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(233, 233, 233)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton3)
                    .add(jButton4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jList3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("initModel", jPanel4);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 747, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 536, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("fitModel", jPanel5);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 747, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 536, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("examineFit", jPanel6);

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        jButton9.setText("jButton9");

        jScrollPane7.setFont(new java.awt.Font("Tahoma", 0, 10));
        jScrollPane7.setPreferredSize(new java.awt.Dimension(100, 100));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(jTable2);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList1);

        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder("Actuals Values"));
        jScrollPane6.setPreferredSize(new java.awt.Dimension(50, 50));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTable1);

        jButton10.setText("Normalize");

        jToggleButton1.setText("jToggleButton1");

        jSlider1.setMinimum(10);
        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(29, 29, 29)
                .add(jSlider1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jSlider1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jTabbedPane2.addTab("tab2", jPanel8);

        jSlider2.setOrientation(javax.swing.JSlider.VERTICAL);

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .add(jSlider2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(25, 25, 25))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jSlider2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jTabbedPane2.addTab("tab1", jPanel7);

        org.jdesktop.layout.GroupLayout jLineChart1Layout = new org.jdesktop.layout.GroupLayout(jLineChart1);
        jLineChart1.setLayout(jLineChart1Layout);
        jLineChart1Layout.setHorizontalGroup(
            jLineChart1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 470, Short.MAX_VALUE)
        );
        jLineChart1Layout.setVerticalGroup(
            jLineChart1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 391, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton1)
                            .add(jButton2)
                            .add(jButton9))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 236, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .add(jLineChart1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButton10)
                            .add(jToggleButton1)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jTabbedPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 57, Short.MAX_VALUE)
                        .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(57, 57, 57))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLineChart1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 391, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(jToggleButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton10))
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jButton9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1))
                    .add(jScrollPane4, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jTabbedPane1.addTab("preProcess", jPanel3);

        jTabbedPane1.getAccessibleContext().setAccessibleParent(jTabbedPane1);

        FileMenu.setText("File");
        OpenProjectFileMenu.setText("Open Project");
        FileMenu.add(OpenProjectFileMenu);

        SaveProjectFileMenu.setText("Save Project");
        FileMenu.add(SaveProjectFileMenu);

        CloseProjectFileMenu.setText("Close Project");
        FileMenu.add(CloseProjectFileMenu);

        FileMenu.add(jSeparator1);

        ExitFileMenu.setText("Exit");
        ExitFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitFileMenuActionPerformed(evt);
            }
        });

        FileMenu.add(ExitFileMenu);

        jMenuBar1.add(FileMenu);

        ImportMenu.setText("Import");
        DataImportMenu.setText("Time explicit dataset");
        DataImportMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataImportMenuActionPerformed(evt);
            }
        });

        ImportMenu.add(DataImportMenu);

        jMenuBar1.add(ImportMenu);

        ModelMenu.setText("Model");
        OpenModelMenu.setText("Import");
        ModelMenu.add(OpenModelMenu);

        SaveModelMenu.setText("Export");
        ModelMenu.add(SaveModelMenu);

        ModelMenu.add(jSeparator2);

        NewModelMenu.setText("New");
        ModelMenu.add(NewModelMenu);

        jMenuBar1.add(ModelMenu);

        PlotMenu.setText("Plot");
        PieChart.setText("Test Plot");
        PieChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PieChartActionPerformed(evt);
            }
        });

        PlotMenu.add(PieChart);

        jMenuItem1.setText("Test Plot 2");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        PlotMenu.add(jMenuItem1);

        jMenuItem2.setText("Item");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });

        PlotMenu.add(jMenuItem2);

        jMenuBar1.add(PlotMenu);

        HelpMenu.setText("Help");
        AboutHelpMenu.setText("About");
        HelpMenu.add(AboutHelpMenu);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
// TODO add your handling code here:
   TPlots.outputGraphics3();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void dataListFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataListFocusLost
// TODO add your handling code here:
    }//GEN-LAST:event_dataListFocusLost

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
// TODO add your handling code here:
    TPlots.outputGraphics2();
       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void inputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputKeyReleased
// TODO add your handling code here:
        // System.out.println("inputKeyReleased");
		if (evt.getKeyCode() == KeyEvent.VK_ENTER)
			if (evt.isControlDown() || evt.isMetaDown())
				try {
					inputDoc.insertString(input.getCaretPosition(), "\n",
							null);
				} catch (Exception e) {
				}
			else {
				String cmd = input.getText().trim();
				input.setText("");
				input.setCaretPosition(0);
				input.requestFocus();
				execute(cmd, true);
			}
		if (evt.getSource().equals(output) && evt.getKeyCode() == KeyEvent.VK_V
				&& (evt.isControlDown() || evt.isMetaDown())) {
			input.requestFocus();
			input.paste();
			input.setCaretPosition(input.getText().length());
		} else if ((evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN)
				&& wasHistEvent) {
			wasHistEvent = false;
			input.setCaretPosition(input.getText().length());
		}
    }//GEN-LAST:event_inputKeyReleased

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
// TODO add your handling code here:
        
    }//GEN-LAST:event_jButton22ActionPerformed

    private void dataList4ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList4ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList4ComponentAdded

    private void dataList4ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList4ValueChanged
// TODO add your handling code here:
    }//GEN-LAST:event_dataList4ValueChanged

    private void removeDataFile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataFile4ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_removeDataFile4ActionPerformed

    private void addDataFile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataFile4ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addDataFile4ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    private void dataList3ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList3ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList3ComponentAdded

    private void dataList3ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList3ValueChanged
// TODO add your handling code here:
    }//GEN-LAST:event_dataList3ValueChanged

    private void removeDataFile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataFile3ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_removeDataFile3ActionPerformed

    private void addDataFile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataFile3ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addDataFile3ActionPerformed

    private void initModelExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initModelExecuteActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_initModelExecuteActionPerformed

    private void dataList2ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList2ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList2ComponentAdded

    private void dataList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList2ValueChanged
// TODO add your handling code here:
    }//GEN-LAST:event_dataList2ValueChanged

    private void removeModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeModelActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_removeModelActionPerformed

    private void addModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addModelActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addModelActionPerformed

    private void dataList1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataList1ComponentAdded
// TODO add your handling code here:
    }//GEN-LAST:event_dataList1ComponentAdded

    private void dataList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataList1ValueChanged
// TODO add your handling code here:
    }//GEN-LAST:event_dataList1ValueChanged

    private void TabsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TabsFocusGained
// TODO add your handling code here:
        input.selectAll();
        input.requestFocus();
    }//GEN-LAST:event_TabsFocusGained

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
 // Get paragraph element
    Element paragraph = jTextArea1.getDocument().getDefaultRootElement();
    
    // Get number of content elements
    int contentCount = paragraph.getElementCount();
    String[] code = new String[contentCount];
    
    // Get index ranges for each content element.
    // Each content element represents one line.
    // Each line includes the terminating newline.
    for (int i=0; i<contentCount; i++) {
        Element e = paragraph.getElement(i);
        int rangeStart = e.getStartOffset();
        int rangeEnd = e.getEndOffset();
        try {
            String line = jTextArea1.getText(rangeStart, rangeEnd-rangeStart);
            code[i]=line;
            execute(line, true);
            
        } catch (BadLocationException ex) {
            
        }
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void dataListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dataListValueChanged
// TODO add your handling code here:
     if (evt.getValueIsAdjusting() == false) {

        if (dataList.getSelectedIndex() == -1) {
        //No selection, disable fire button.
            removeDataFile.setEnabled(false);

        } else {
        //Selection, enable the fire button.
            removeDataFile.setEnabled(true);
        }
    }
    }//GEN-LAST:event_dataListValueChanged

    private void dataListComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_dataListComponentAdded
// TODO add your handling code here:
       System.out.println("dataListValueChanged");
    }//GEN-LAST:event_dataListComponentAdded

    private void removeDataFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDataFileActionPerformed
// TODO add your handling code here:
    int index = dataList.getSelectedIndex();
    dataNameListModel.remove(index);

    int size = dataNameListModel.getSize();

    if (size == 0) { //Nobody's left, disable firing.
        removeDataFile.setEnabled(false);

    } else { //Select an index.
        if (index == dataNameListModel.getSize()) {
            //removed item in last position
            index--;
        }

        dataList.setSelectedIndex(index);
        dataList.ensureIndexIsVisible(index);
    }

    
//     int selectedElement = dataList.getSelectedIndex();
//     
//     dataNameListModel.removeElementAt(selectedElement);
//     dataPathVector.removeElementAt(selectedElement);
//     dataList.validate();
//     jScrollPane2.revalidate();
//     jScrollPane2.repaint();
	
    }//GEN-LAST:event_removeDataFileActionPerformed

    private void addDataFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataFileActionPerformed
    String filename = "*.txt";
    String name = null;
    
    // Create a file chooser
    JFileChooser chooser = new JFileChooser();
    chooser.setCurrentDirectory(new File("."));
    chooser.setSelectedFile(new File(filename));
    int result  = chooser.showOpenDialog(this); //OK or cancel
        if (result==JFileChooser.APPROVE_OPTION) {
            name = chooser.getSelectedFile().getName().substring(0, chooser.getSelectedFile().getName().lastIndexOf("."));
        }
	else {System.out.println("Open File Dialog was cancelled.");}
	if( name != null ) {
            int index = dataList.getSelectedIndex(); //get selected index
            if (index == -1) { //no selection, so insert at beginning
                index = 0;
            } else {           //add after the selected item
                index++;
            }
            dataPathVector.insertElementAt(chooser.getSelectedFile().getAbsolutePath().toString(). replaceAll("\\\\","\\\\\\\\"),index);
            dataNameListModel.insertElementAt(name, index);
            //System.out.println(chooser.getSelectedFile().getAbsolutePath().replaceAll("\\\\","\\\\\\\\"));
            //System.out.println(dataPathVector.get(index));

            //Select the new item and make it visible.
            dataList.setSelectedIndex(index);
            dataList.ensureIndexIsVisible(index);
	}
//            dataNameListModel.addElement(stringValue);
//            
//            // dataNameListModel.addElement(dataPathVector.lastElement().toString()); // for testing
//            jScrollPane2.revalidate();
//            jScrollPane2.repaint();
    
    }//GEN-LAST:event_addDataFileActionPerformed

    private void PieChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PieChartActionPerformed
// TODO add your handling code here:
    TPlots.outputGraphics();
    }//GEN-LAST:event_PieChartActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
// TODO add your handling code here:
//        String[] rInput = new String[1];
//        String[] rOutput = new String[1];
//        rInput[0] = input.getText();
//        rOutputWindow.append(">" + rInput + newline);
//        // rOutput = TIMPGUI.interactWithR(rInput);
//        System.out.println(rOutput[0]);
//  //      rOutputWindow.append("  " + rOutput + newline);
//        input.selectAll();
    }//GEN-LAST:event_inputActionPerformed

    private void ExitFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitFileMenuActionPerformed
// TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitFileMenuActionPerformed

    private void DataImportMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataImportMenuActionPerformed
// TODO add your handling code here:
  //for a default JFileChooser using the default directory
  JFileChooser fc = new JFileChooser();
  int option = fc.showOpenDialog(this);
  //where the 'parentComponent' is normally
  //a JFrame or a JDialog.
   if (option==JFileChooser.APPROVE_OPTION) {
        // dataSourceField.setText(reportFile.getAbsolutePath());  // show it on GUI
      }
		else {System.out.println("error");}
  
    }//GEN-LAST:event_DataImportMenuActionPerformed
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutHelpMenu;
    private javax.swing.JMenuItem CloseProjectFileMenu;
    private javax.swing.JMenuItem DataImportMenu;
    private javax.swing.JMenuItem ExitFileMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenu ImportMenu;
    private javax.swing.JMenu ModelMenu;
    private javax.swing.JMenuItem NewModelMenu;
    private javax.swing.JMenuItem OpenModelMenu;
    private javax.swing.JMenuItem OpenProjectFileMenu;
    private javax.swing.JMenuItem PieChart;
    private javax.swing.JMenu PlotMenu;
    private javax.swing.JMenuItem SaveModelMenu;
    private javax.swing.JMenuItem SaveProjectFileMenu;
    private javax.swing.JButton addDataFile;
    private javax.swing.JList dataList;
    public javax.swing.JTextField input;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private org.jfree.beans.JLineChart jLineChart1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    public javax.swing.JTextArea output;
    private javax.swing.JButton removeDataFile;
    // End of variables declaration//GEN-END:variables

    private final static String newline = "\n";
   // dataNameListModel.addListDataListener(new MyListDataListener());
    
   

class MyListDataListener implements ListDataListener {
    public void contentsChanged(ListDataEvent e) {
        jTextArea1.append("contentsChanged: " + e.getIndex0() +
	           ", " + e.getIndex1() + newline);
    }
    public void intervalAdded(ListDataEvent e) {
        System.out.print(dataNameListModel.indexOf(dataNameListModel.firstElement()));
        System.out.print(dataNameListModel.indexOf(dataNameListModel.lastElement()));
                
//        jTextArea1.append("intervalAdded: " + e.getIndex0() +
//	           ", " + e.getIndex1() + newline);
        jTextArea1.setText("");
        for (int i = dataNameListModel.indexOf(dataNameListModel.firstElement()); i < dataNameListModel.indexOf(dataNameListModel.lastElement())+1; i++) {
            readData.setArg("dat",dataNameListModel.getElementAt(i).toString());
            readData.setArg("filenm",dataPathVector.get(i).toString());
            readData.setArg("sep","\"\"");
            jTextArea1.append(readData.generateCode());
       }
    }
    public void intervalRemoved(ListDataEvent e) {
//        jTextArea1.append("intervalRemoved: " + e.getIndex0() +
//	           ", " + e.getIndex1() + newline);
      jTextArea1.setText("");
      if (dataNameListModel.isEmpty()==false) {
        for (int i = dataNameListModel.indexOf(dataNameListModel.firstElement()); i < dataNameListModel.indexOf(dataNameListModel.lastElement())+1; i++) {
            jTextArea1.append(dataNameListModel.getElementAt(i).toString());
            jTextArea1.append(" <- readData(\"");
            jTextArea1.append(dataPathVector.get(i).toString());
            jTextArea1.append("\")\n");
       }
    }
    }
}

	/**
	 * Close Console, but not before we asked the user if he wants to save
	 * opened Editors.
	 */
	public void exit() {
		dispose();
	}

	/**
	 * Close Console, but not before we asked the user if he wants to save
	 * opened Editors.
	 */
	public void dispose() {
		execute("q()", false);
	}

	/**
	 * Execute a command and add it into history.
	 * 
	 * @param cmd
	 *            command for execution
	 * @param addToHist
	 *            indicates wether the command should be added to history or not
	 */
	public void execute(String cmd, boolean addToHist) {
		if (!TIMPGUI.STARTED)
			return;
		if (addToHist && TIMPGUI.RHISTORY.size() == 0)
			TIMPGUI.RHISTORY.add(cmd);
		else if (addToHist && cmd.trim().length() > 0
				&& TIMPGUI.RHISTORY.size() > 0
				&& !TIMPGUI.RHISTORY.lastElement().equals(cmd.trim()))
			TIMPGUI.RHISTORY.add(cmd);
		currentHistPosition = TIMPGUI.RHISTORY.size();

		String[] cmdArray = cmd.split("\n");

		String c = null;
		for (int i = 0; i < cmdArray.length; i++) {
			c = cmdArray[i];
			if (isHelpCMD(c))
				try {
					outputDoc.insertString(outputDoc.getLength(), c + "\n"
							+ RController.getRPrompt(),null);
				} catch (Exception e) {
				}
			else if (isSupported(c))
				TIMPGUI.rSync.triggerNotification(c.trim());
		}
	}

	/**
	 * Parse command if it is a helpcommand.
	 * 
	 * @param cmd
	 *            command which should be executed
	 * @return true if help should be started, false if not
	 */
	// later i hope it will be possible let R do this
	public boolean isHelpCMD(String cmd) {
		cmd = cmd.trim();
		if (cmd.startsWith("help(") || cmd.startsWith("?")
				|| cmd.startsWith("help.start(")
				|| cmd.startsWith("help.search(")) {
			// help(cmd);
			return true;
		}
		return false;
	}

	private boolean isSupported(String cmd) {
		cmd = cmd.trim();
		if (cmd.startsWith("fix(") || cmd.startsWith("edit(")
				|| cmd.startsWith("edit.data.frame(")) {
			return false;
		}
		return true;
	}

        
	/**
	 * Clear the console's content, if it's too full.
	 */
	public void clearconsole() {
        // remove output
	}

	/**
	 * Load a workspace, R-command: load(...).
	 */
	public void loadWorkSpace() {
			// execute("load(\"" + wspace.replace('\\', '/') + "\")", false);
		}

	/**
	 * Save workspace with specified filename, R-command: save.image(...).
	 * 
	 * @param file
	 *            filename
	 */
	public void saveWorkSpace(String file) {
		if (file == null)
			execute("save.image()", false);
		else
			execute("save.image(\""
					+ (file == null ? "" : file.replace('\\', '/'))
					+ "\",compress=TRUE)", false);
		TIMPGUI.writeHistory();
	}

	/**
	 * Save workspace to a different file then .RData.
	 */
	public void saveWorkSpaceAs() {
			//saveWorkSpace(file);
			//TIMPGUI.writeHistory();
		}
        
        	/**
	 * Get the font's width form current settings using {@see FontMetrics}.
	 * 
	 * @return fontwidth
	 */
	public int getFontWidth() {
		int width = output.getFontMetrics(output.getFont()).charWidth('M');
		width = output.getWidth() / width;
		return (int) (width) - (JGRPrefs.isMac ? 0 : 1);
	}


	/**
	 * Write output from R into console (old R callback).
	 * 
	 * @param re
	 *            used Rengine
	 * @param text
	 *            output
	 */
	public void rWriteConsole(Rengine re, String text) {
                Document outputDoc = output.getDocument();
		console.append(text);
		if (console.length() > 100) {
			output.append(console.toString());
			console.delete(0, console.length());
			output.setCaretPosition(outputDoc.getLength());
		}
	}
			 
	 /**
	 * Invoke the busy cursor (R callback).
	 * 
	 * @param re
	 *            used Rengine
	 * @param which
	 *            busy (1) or not (0)
	 */
	public void rBusy(Rengine re, int which) {
                Document outputDoc = output.getDocument();
		if (which == 0) {
			if (output != null) {
				output.append(console.toString()); // color?
				console.delete(0, console.length());
			}
			output.setCaretPosition(outputDoc.getLength());
		} else {
			;
		}
	}

	/**
	 * Read the commands from input area (R callback).
	 * 
	 * @param re
	 *            used Rengine
	 * @param prompt
	 *            prompt from R
	 * @param addToHistory
	 *            is it an command which to add to the history
	 */
	public String rReadConsole(Rengine re, String prompt, int addToHistory) {
                Document outputDoc = output.getDocument();
		if (prompt.indexOf("Save workspace") > -1) {
			String retVal = TIMPGUI.exit();
			if (wspace != null && retVal.indexOf('y') >= 0) {
				TIMPGUI.R.eval("save.image(\"" + wspace.replace('\\', '/') + "\")");
				return "n\n";
			} else
				return retVal;
		} else {
			output.append(prompt);
			output.setCaretPosition(outputDoc.getLength());
			String s = TIMPGUI.rSync.waitForNotification();
			try {
				outputDoc.insertString(outputDoc.getLength(), s + "\n",null);
			} catch (Exception e) {
			}
			return (s == null || s.length() == 0) ? "\n" : s + "\n";
		}
	}

	/**
	 * Showing a message from the rengine (R callback).
	 * 
	 * @param re
	 *            used Rengine
	 * @param message
	 *            message from R
	 */
	public void rShowMessage(Rengine re, String message) {
		JOptionPane.showMessageDialog(this, message, "R Message",
				JOptionPane.INFORMATION_MESSAGE);
	}

	/**
	 * Choose a file invoked be file.choose() (R callback).
	 * 
	 * @param re
	 *            used Rengine
	 * @param newFile
	 *            if it's a new file
	 */
		public String rChooseFile(Rengine re, int newFile) {
                String res = null;
                String directory = JGRPrefs.workingDirectory;
                    if (directory != null) {
                                    JFileChooser chooser = new JFileChooser(directory);             
                    }
			else {
                                    JFileChooser chooser = new JFileChooser();
                                   
                        }
                 int result  = chooser.showOpenDialog(this);
                 if (result==JFileChooser.APPROVE_OPTION) {
                    res = chooser.getCurrentDirectory().getAbsolutePath()+ File.separator;
                 }
		return res;
	}

	/**
	 * Flush the console (R callback). !! not implemented yet !!
	 * 
	 * @param re
	 *            used Rengine
	 */
	public void rFlushConsole(Rengine re) {
	}

	/**
	 * Load history from a file (R callback).
	 * 
	 * @param re
	 *            used Rengine
	 * @param filename
	 *            history file
	 */
	public void rLoadHistory(Rengine re, String filename) {
		File hist = null;
		try {
			if ((hist = new File(filename)).exists()) {
				BufferedReader reader = new BufferedReader(new FileReader(hist));
				if (TIMPGUI.RHISTORY == null)
					TIMPGUI.RHISTORY = new Vector();
				while (reader.ready())
					TIMPGUI.RHISTORY.add(reader.readLine() + "\n");
				reader.close();
			}
		} catch (Exception e) {
			// new Error(e);
		}
	}

	/**
	 * Save history to a file (R callback).
	 * 
	 * @param re
	 *            used Rengine
	 * @param filename
	 *            history file
	 */
	public void rSaveHistory(Rengine re, String filename) {
		try {
			System.out.println("Save History");
			File hist = new File(filename);
			BufferedWriter writer = new BufferedWriter(new FileWriter(hist));
			Enumeration e = TIMPGUI.RHISTORY.elements();
			int i = 0;
			while (e.hasMoreElements())
				writer.write(e.nextElement().toString() + "#\n");
			writer.flush();
			writer.close();
		} catch (Exception e) {
			// new ErrorMsg(e);
		}
	}
        
        	// ======================================================= other events ===
public class MyKeyListener implements KeyListener {
	public void keyPressed(KeyEvent ke) {
		if (ke.getSource().equals(output) && !ke.isMetaDown()
				&& !ke.isControlDown() && !ke.isAltDown())
			input.requestFocus();
		if (ke.getKeyCode() == KeyEvent.VK_UP) {
			if (currentHistPosition > 0)
				if (input.getCaretPosition() == 0
						|| input.getCaretPosition() == input.getText().length()) {
					// if (input.getText().trim().length() > 0) {
					// if (currentHistPosition==JGR.RHISTORY.size()-1 &&
					// !input.getText().trim().equals(JGR.RHISTORY.elementAt(currentHistPosition-1)))
					// {
					// if (System.getProperty("user.name").indexOf("markus") >
					// -1)
					// JGR.RHISTORY.insertElementAt(input.getText().trim(),currentHistPosition);
					// else
					// JGR.RHISTORY.add(input.getText().trim());
					// }
					// else if
					// (System.getProperty("user.name").indexOf("markus") > -1)
					// JGR.RHISTORY.add(input.getText().trim());
					// }
					input.setText(TIMPGUI.RHISTORY.get(--currentHistPosition)
							.toString());
					input.setCaretPosition(input.getText().length());
					wasHistEvent = true;
				}
		} else if (ke.getKeyCode() == KeyEvent.VK_DOWN)
			if (input.getCaretPosition() == 0
					|| input.getCaretPosition() == input.getText().length()) {
				if (currentHistPosition < TIMPGUI.RHISTORY.size() - 1) {
					input.setText(TIMPGUI.RHISTORY.get(++currentHistPosition)
							.toString());
					input.setCaretPosition(input.getText().length());
				} else if (TIMPGUI.RHISTORY.size() > 0
						&& currentHistPosition < TIMPGUI.RHISTORY.size()) {
					input.setText("");
					currentHistPosition++;
				}
				wasHistEvent = true;
			}
	}
        
	/**
	 * actionPerformed: handle action event: menus.
	 */
//	public void actionPerformed(ActionEvent e) {
//		String cmd = e.getActionCommand();
//		if (cmd == "about")
//			new AboutDialog(this);
//		else if (cmd == "cut")
//			input.cut();
//		else if (cmd == "clearwsp")
//			execute("rm(list=ls())", false);
//		else if (cmd == "copy") {
//			input.copy();
//			output.copy();
//		} else if (cmd == "copyoutput")
//			output.copyOutput();
//		else if (cmd == "copycmds")
//			output.copyCommands();
//		else if (cmd == "copyresult")
//			output.copyResults();
//		else if (cmd == "clearconsole")
//			clearconsole();
//		else if (cmd == "delete")
//			try {
//				int i = 0;
//				inputDoc.remove((i = input.getSelectionStart()), input
//						.getSelectionEnd()
//						- i);
//			} catch (BadLocationException ex) {
//			}
//		else if (cmd == "editor")
//			new Editor();
//		else if (cmd == "exit")
//			dispose();
//		else if (cmd == "exportOutput")
//			output.startExport();
//		else if (cmd == "fontBigger")
//			FontTracker.current.setFontBigger();
//		else if (cmd == "fontSmaller")
//			FontTracker.current.setFontSmaller();
//		else if (cmd == "loaddata")
//			new JGRDataFileOpenDialog(this, JGRPrefs.workingDirectory);
//		else if (cmd == "open")
//			new Editor().open();
//		else if (cmd == "openwsp")
//			loadWorkSpace();
//		else if (cmd == "new")
//			new Editor();
//		// else if (cmd == "newwsp") newWorkSpace();
//		else if (cmd == "objectmgr")
//			execute("object.browser()", false);
//		else if (cmd == "packagemgr")
//			execute("package.manager()", false);
//		else if (cmd == "paste")
//			input.paste();
//		else if (cmd == "prefs")
//			new PrefsDialog(this);
//		else if (cmd == "redo")
//			try {
//				if (toolBar.undoMgr.canRedo())
//					toolBar.undoMgr.redo();
//			} catch (CannotUndoException ex) {
//			}
//		else if (cmd == "help")
//			execute("help.start()", false);
//		else if (cmd == "table")
//			new DataTable(null, null, true);
//		else if (cmd == "save")
//			output.startExport();
//		else if (cmd == "savewsp")
//			saveWorkSpace(wspace);
//		else if (cmd == "saveaswsp")
//			saveWorkSpaceAs();
//		else if (cmd == "search")
//			//textFinder.showFind(false);
//			FindReplaceDialog.findExt(this,output);
//		else if (cmd == "searchnext")
//			FindReplaceDialog.findNextExt(this,output);
//			//textFinder.showFind(true);
//		else if (cmd == "source")
//			execute("source(file.choose())", false);
//		else if (cmd == "stop")
//			JGR.R.rniStop(1);
//		else if (cmd == "selAll") {
//			if (input.isFocusOwner())
//				input.selectAll();
//			else if (output.isFocusOwner())
//				output.selectAll();
//		} else if (cmd == "undo")
//			try {
//				if (toolBar.undoMgr.canUndo())
//					toolBar.undoMgr.undo();
//			} catch (Exception ex) {
//			}
//		else if (cmd == "setwd") {
//			JFileChooser chooser = new JFileChooser();
//			chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//			chooser.setDialogTitle("Choose Working Directory");
//			chooser.setApproveButtonText("Choose");
//			int r = chooser.showOpenDialog(this);
//			if (r == JFileChooser.CANCEL_OPTION)
//				return;
//			if (chooser.getSelectedFile() != null)
//				JGRPrefs.workingDirectory = chooser.getSelectedFile()
//						.toString();
//			execute("setwd(\""
//					+ chooser.getSelectedFile().toString().replace('\\', '/')
//					+ "\")", true);
//		} else if (cmd == "update")
//			execute("update.JGR(contriburl=\"http://rosuda.org/R/nightly\")",
//					false);
//	}

        public void keyTyped(KeyEvent e) {
        }

        public void keyReleased(KeyEvent e) {
        }
}
}